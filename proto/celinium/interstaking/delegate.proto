syntax = "proto3";

package celinlim.interstaking;

import "gogoproto/gogo.proto";
import "cosmos_proto/cosmos.proto";
import "cosmos/base/v1beta1/coin.proto";


option go_package = "celinium/x/inter-staking/types";

message ICADelegation {
    string  validator_address     = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];
    cosmos.base.v1beta1.Coin amount = 3 [(gogoproto.nullable) = false];   
}

message UnDelegation {
    string  validator_address     = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];
    cosmos.base.v1beta1.Coin amount = 2 [(gogoproto.nullable) = false];   
}

message UserDelegation {
    cosmos.base.v1beta1.Coin amount = 2 [(gogoproto.nullable) = false];   
}

message DelegationTask {
    string chain_id = 1;
    string delegator    = 2 [(cosmos_proto.scalar) = "cosmos.AddressString"];
    cosmos.base.v1beta1.Coin amount = 3 [(gogoproto.nullable) = false];
    // Mark when the task is complete
    // In the process of using IBC for cross-chain communication, the seqence of 
    // the channel is used as a signal to obtain the communication progress.
    // When the corresponding Sequence is obtained in the ACK of the communication process, 
    // it means that the peer end has completed the processing, and the task can advance to the next stage.
    uint64 done_singal = 4;  
}

message DelegationTasks{
    repeated DelegationTask delegation_tasks = 1 [(gogoproto.nullable) = false];
}
