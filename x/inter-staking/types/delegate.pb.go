// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: celinium/interstaking/delegate.proto

package types

import (
	fmt "fmt"
	_ "github.com/cosmos/cosmos-proto"
	types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type ICADelegation struct {
	ChainID string     `protobuf:"bytes,1,opt,name=chainID,proto3" json:"chainID,omitempty"`
	Amount  types.Coin `protobuf:"bytes,2,opt,name=amount,proto3" json:"amount"`
}

func (m *ICADelegation) Reset()         { *m = ICADelegation{} }
func (m *ICADelegation) String() string { return proto.CompactTextString(m) }
func (*ICADelegation) ProtoMessage()    {}
func (*ICADelegation) Descriptor() ([]byte, []int) {
	return fileDescriptor_40a21c29bec4b091, []int{0}
}
func (m *ICADelegation) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ICADelegation) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ICADelegation.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ICADelegation) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ICADelegation.Merge(m, src)
}
func (m *ICADelegation) XXX_Size() int {
	return m.Size()
}
func (m *ICADelegation) XXX_DiscardUnknown() {
	xxx_messageInfo_ICADelegation.DiscardUnknown(m)
}

var xxx_messageInfo_ICADelegation proto.InternalMessageInfo

func (m *ICADelegation) GetChainID() string {
	if m != nil {
		return m.ChainID
	}
	return ""
}

func (m *ICADelegation) GetAmount() types.Coin {
	if m != nil {
		return m.Amount
	}
	return types.Coin{}
}

type UnDelegation struct {
	ValidatorAddress string     `protobuf:"bytes,1,opt,name=validator_address,json=validatorAddress,proto3" json:"validator_address,omitempty"`
	Amount           types.Coin `protobuf:"bytes,2,opt,name=amount,proto3" json:"amount"`
}

func (m *UnDelegation) Reset()         { *m = UnDelegation{} }
func (m *UnDelegation) String() string { return proto.CompactTextString(m) }
func (*UnDelegation) ProtoMessage()    {}
func (*UnDelegation) Descriptor() ([]byte, []int) {
	return fileDescriptor_40a21c29bec4b091, []int{1}
}
func (m *UnDelegation) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UnDelegation) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UnDelegation.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UnDelegation) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UnDelegation.Merge(m, src)
}
func (m *UnDelegation) XXX_Size() int {
	return m.Size()
}
func (m *UnDelegation) XXX_DiscardUnknown() {
	xxx_messageInfo_UnDelegation.DiscardUnknown(m)
}

var xxx_messageInfo_UnDelegation proto.InternalMessageInfo

func (m *UnDelegation) GetValidatorAddress() string {
	if m != nil {
		return m.ValidatorAddress
	}
	return ""
}

func (m *UnDelegation) GetAmount() types.Coin {
	if m != nil {
		return m.Amount
	}
	return types.Coin{}
}

type UserDelegation struct {
	Amount types.Coin `protobuf:"bytes,2,opt,name=amount,proto3" json:"amount"`
}

func (m *UserDelegation) Reset()         { *m = UserDelegation{} }
func (m *UserDelegation) String() string { return proto.CompactTextString(m) }
func (*UserDelegation) ProtoMessage()    {}
func (*UserDelegation) Descriptor() ([]byte, []int) {
	return fileDescriptor_40a21c29bec4b091, []int{2}
}
func (m *UserDelegation) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UserDelegation) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UserDelegation.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UserDelegation) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UserDelegation.Merge(m, src)
}
func (m *UserDelegation) XXX_Size() int {
	return m.Size()
}
func (m *UserDelegation) XXX_DiscardUnknown() {
	xxx_messageInfo_UserDelegation.DiscardUnknown(m)
}

var xxx_messageInfo_UserDelegation proto.InternalMessageInfo

func (m *UserDelegation) GetAmount() types.Coin {
	if m != nil {
		return m.Amount
	}
	return types.Coin{}
}

type DelegationTask struct {
	ChainId   string     `protobuf:"bytes,1,opt,name=chain_id,json=chainId,proto3" json:"chain_id,omitempty"`
	Delegator string     `protobuf:"bytes,2,opt,name=delegator,proto3" json:"delegator,omitempty"`
	Amount    types.Coin `protobuf:"bytes,3,opt,name=amount,proto3" json:"amount"`
}

func (m *DelegationTask) Reset()         { *m = DelegationTask{} }
func (m *DelegationTask) String() string { return proto.CompactTextString(m) }
func (*DelegationTask) ProtoMessage()    {}
func (*DelegationTask) Descriptor() ([]byte, []int) {
	return fileDescriptor_40a21c29bec4b091, []int{3}
}
func (m *DelegationTask) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DelegationTask) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DelegationTask.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DelegationTask) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DelegationTask.Merge(m, src)
}
func (m *DelegationTask) XXX_Size() int {
	return m.Size()
}
func (m *DelegationTask) XXX_DiscardUnknown() {
	xxx_messageInfo_DelegationTask.DiscardUnknown(m)
}

var xxx_messageInfo_DelegationTask proto.InternalMessageInfo

func (m *DelegationTask) GetChainId() string {
	if m != nil {
		return m.ChainId
	}
	return ""
}

func (m *DelegationTask) GetDelegator() string {
	if m != nil {
		return m.Delegator
	}
	return ""
}

func (m *DelegationTask) GetAmount() types.Coin {
	if m != nil {
		return m.Amount
	}
	return types.Coin{}
}

type DelegationTasks struct {
	DelegationTasks []DelegationTask `protobuf:"bytes,1,rep,name=delegation_tasks,json=delegationTasks,proto3" json:"delegation_tasks"`
}

func (m *DelegationTasks) Reset()         { *m = DelegationTasks{} }
func (m *DelegationTasks) String() string { return proto.CompactTextString(m) }
func (*DelegationTasks) ProtoMessage()    {}
func (*DelegationTasks) Descriptor() ([]byte, []int) {
	return fileDescriptor_40a21c29bec4b091, []int{4}
}
func (m *DelegationTasks) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DelegationTasks) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DelegationTasks.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DelegationTasks) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DelegationTasks.Merge(m, src)
}
func (m *DelegationTasks) XXX_Size() int {
	return m.Size()
}
func (m *DelegationTasks) XXX_DiscardUnknown() {
	xxx_messageInfo_DelegationTasks.DiscardUnknown(m)
}

var xxx_messageInfo_DelegationTasks proto.InternalMessageInfo

func (m *DelegationTasks) GetDelegationTasks() []DelegationTask {
	if m != nil {
		return m.DelegationTasks
	}
	return nil
}

func init() {
	proto.RegisterType((*ICADelegation)(nil), "celinlim.interstaking.ICADelegation")
	proto.RegisterType((*UnDelegation)(nil), "celinlim.interstaking.UnDelegation")
	proto.RegisterType((*UserDelegation)(nil), "celinlim.interstaking.UserDelegation")
	proto.RegisterType((*DelegationTask)(nil), "celinlim.interstaking.DelegationTask")
	proto.RegisterType((*DelegationTasks)(nil), "celinlim.interstaking.DelegationTasks")
}

func init() {
	proto.RegisterFile("celinium/interstaking/delegate.proto", fileDescriptor_40a21c29bec4b091)
}

var fileDescriptor_40a21c29bec4b091 = []byte{
	// 399 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x93, 0x4f, 0x8e, 0xda, 0x30,
	0x14, 0xc6, 0xe3, 0x52, 0xd1, 0x62, 0x5a, 0xa0, 0x11, 0x95, 0x02, 0x0b, 0x17, 0xa1, 0x56, 0x62,
	0x43, 0x22, 0xa8, 0xd4, 0x76, 0xcb, 0x9f, 0x2e, 0xd8, 0xd2, 0xd2, 0x45, 0x37, 0x91, 0x89, 0xad,
	0xd4, 0x22, 0xb1, 0x51, 0x6c, 0x50, 0x2b, 0xf5, 0x0c, 0x55, 0x0f, 0x30, 0xc7, 0x98, 0x43, 0xb0,
	0x44, 0xb3, 0x9a, 0xd5, 0x68, 0x04, 0x17, 0x19, 0x11, 0x1b, 0x08, 0xd2, 0x68, 0x46, 0xc3, 0x2e,
	0x7e, 0xef, 0x97, 0xef, 0xfb, 0x6c, 0xbd, 0x07, 0xdf, 0x07, 0x34, 0x62, 0x9c, 0x2d, 0x62, 0x8f,
	0x71, 0x45, 0x13, 0xa9, 0xf0, 0x8c, 0xf1, 0xd0, 0x23, 0x34, 0xa2, 0x21, 0x56, 0xd4, 0x9d, 0x27,
	0x42, 0x09, 0xfb, 0x6d, 0x4a, 0x45, 0x2c, 0x76, 0xb3, 0x54, 0xbd, 0x1a, 0x8a, 0x50, 0xa4, 0x84,
	0xb7, 0xfb, 0xd2, 0x70, 0xbd, 0x16, 0x08, 0x19, 0x0b, 0xe9, 0xeb, 0x86, 0x3e, 0x98, 0x16, 0xd2,
	0x27, 0x6f, 0x8a, 0x25, 0xf5, 0x96, 0x9d, 0x29, 0x55, 0xb8, 0xe3, 0x05, 0x82, 0x71, 0xdd, 0x6f,
	0xfe, 0x85, 0xaf, 0x47, 0x83, 0xde, 0x50, 0x9b, 0x33, 0xc1, 0xed, 0x2e, 0x7c, 0x11, 0xfc, 0xc2,
	0x8c, 0x8f, 0x86, 0x0e, 0x68, 0x80, 0x56, 0xa1, 0xef, 0x5c, 0x5d, 0xb6, 0xab, 0x46, 0xb3, 0x47,
	0x48, 0x42, 0xa5, 0xfc, 0xa6, 0x12, 0xc6, 0xc3, 0xf1, 0x1e, 0xb4, 0x3f, 0xc3, 0x3c, 0x8e, 0xc5,
	0x82, 0x2b, 0xe7, 0x59, 0x03, 0xb4, 0x8a, 0xdd, 0x9a, 0x6b, 0xf8, 0x9d, 0xab, 0x6b, 0x5c, 0xdd,
	0x81, 0x60, 0xbc, 0xff, 0x7c, 0x75, 0xf3, 0xce, 0x1a, 0x1b, 0xbc, 0xf9, 0x0f, 0xc0, 0x57, 0x13,
	0x9e, 0x71, 0xff, 0x0a, 0xdf, 0x2c, 0x71, 0xc4, 0x08, 0x56, 0x22, 0xf1, 0xb1, 0x76, 0x7b, 0x34,
	0x47, 0xe5, 0xf0, 0x8b, 0xa9, 0x9f, 0x1f, 0x68, 0x04, 0x4b, 0x13, 0x49, 0x93, 0x4c, 0xa2, 0xb3,
	0xa5, 0x2e, 0x00, 0x2c, 0x1d, 0x75, 0xbe, 0x63, 0x39, 0xb3, 0x6b, 0xf0, 0x65, 0xfa, 0x64, 0x3e,
	0x23, 0xfa, 0x52, 0xfb, 0x27, 0x24, 0xf6, 0x27, 0x58, 0x30, 0x13, 0x20, 0x92, 0xd4, 0xe9, 0xa1,
	0x0b, 0x1f, 0xd1, 0x4c, 0xbc, 0xdc, 0xd3, 0xe2, 0x31, 0x58, 0x3e, 0x4d, 0x27, 0xed, 0x1f, 0xb0,
	0x42, 0x0e, 0x25, 0x5f, 0xed, 0x6a, 0x0e, 0x68, 0xe4, 0x5a, 0xc5, 0xee, 0x07, 0xf7, 0xde, 0x71,
	0x74, 0x4f, 0x15, 0x8c, 0x43, 0x99, 0x9c, 0xea, 0xf6, 0xbf, 0xac, 0x36, 0x08, 0xac, 0x37, 0x08,
	0xdc, 0x6e, 0x10, 0xf8, 0xbf, 0x45, 0xd6, 0x7a, 0x8b, 0xac, 0xeb, 0x2d, 0xb2, 0x7e, 0xa2, 0xc3,
	0x2e, 0xfc, 0xd6, 0xdb, 0xd0, 0xde, 0xaf, 0x83, 0xfa, 0x33, 0xa7, 0x72, 0x9a, 0x4f, 0x87, 0xf4,
	0xe3, 0x5d, 0x00, 0x00, 0x00, 0xff, 0xff, 0xc9, 0x83, 0xed, 0x59, 0x34, 0x03, 0x00, 0x00,
}

func (m *ICADelegation) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ICADelegation) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ICADelegation) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Amount.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintDelegate(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if len(m.ChainID) > 0 {
		i -= len(m.ChainID)
		copy(dAtA[i:], m.ChainID)
		i = encodeVarintDelegate(dAtA, i, uint64(len(m.ChainID)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *UnDelegation) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UnDelegation) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UnDelegation) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Amount.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintDelegate(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if len(m.ValidatorAddress) > 0 {
		i -= len(m.ValidatorAddress)
		copy(dAtA[i:], m.ValidatorAddress)
		i = encodeVarintDelegate(dAtA, i, uint64(len(m.ValidatorAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *UserDelegation) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UserDelegation) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UserDelegation) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Amount.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintDelegate(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	return len(dAtA) - i, nil
}

func (m *DelegationTask) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DelegationTask) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DelegationTask) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Amount.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintDelegate(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	if len(m.Delegator) > 0 {
		i -= len(m.Delegator)
		copy(dAtA[i:], m.Delegator)
		i = encodeVarintDelegate(dAtA, i, uint64(len(m.Delegator)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.ChainId) > 0 {
		i -= len(m.ChainId)
		copy(dAtA[i:], m.ChainId)
		i = encodeVarintDelegate(dAtA, i, uint64(len(m.ChainId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *DelegationTasks) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DelegationTasks) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DelegationTasks) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.DelegationTasks) > 0 {
		for iNdEx := len(m.DelegationTasks) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.DelegationTasks[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintDelegate(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintDelegate(dAtA []byte, offset int, v uint64) int {
	offset -= sovDelegate(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *ICADelegation) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ChainID)
	if l > 0 {
		n += 1 + l + sovDelegate(uint64(l))
	}
	l = m.Amount.Size()
	n += 1 + l + sovDelegate(uint64(l))
	return n
}

func (m *UnDelegation) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ValidatorAddress)
	if l > 0 {
		n += 1 + l + sovDelegate(uint64(l))
	}
	l = m.Amount.Size()
	n += 1 + l + sovDelegate(uint64(l))
	return n
}

func (m *UserDelegation) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Amount.Size()
	n += 1 + l + sovDelegate(uint64(l))
	return n
}

func (m *DelegationTask) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ChainId)
	if l > 0 {
		n += 1 + l + sovDelegate(uint64(l))
	}
	l = len(m.Delegator)
	if l > 0 {
		n += 1 + l + sovDelegate(uint64(l))
	}
	l = m.Amount.Size()
	n += 1 + l + sovDelegate(uint64(l))
	return n
}

func (m *DelegationTasks) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.DelegationTasks) > 0 {
		for _, e := range m.DelegationTasks {
			l = e.Size()
			n += 1 + l + sovDelegate(uint64(l))
		}
	}
	return n
}

func sovDelegate(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozDelegate(x uint64) (n int) {
	return sovDelegate(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *ICADelegation) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDelegate
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ICADelegation: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ICADelegation: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDelegate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDelegate
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDelegate
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChainID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDelegate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDelegate
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDelegate
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Amount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDelegate(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthDelegate
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UnDelegation) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDelegate
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UnDelegation: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UnDelegation: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ValidatorAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDelegate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDelegate
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDelegate
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ValidatorAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDelegate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDelegate
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDelegate
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Amount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDelegate(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthDelegate
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UserDelegation) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDelegate
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UserDelegation: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UserDelegation: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDelegate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDelegate
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDelegate
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Amount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDelegate(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthDelegate
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DelegationTask) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDelegate
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DelegationTask: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DelegationTask: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDelegate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDelegate
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDelegate
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChainId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Delegator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDelegate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDelegate
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDelegate
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Delegator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDelegate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDelegate
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDelegate
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Amount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDelegate(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthDelegate
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DelegationTasks) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDelegate
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DelegationTasks: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DelegationTasks: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DelegationTasks", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDelegate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDelegate
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDelegate
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DelegationTasks = append(m.DelegationTasks, DelegationTask{})
			if err := m.DelegationTasks[len(m.DelegationTasks)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDelegate(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthDelegate
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipDelegate(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowDelegate
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowDelegate
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowDelegate
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthDelegate
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupDelegate
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthDelegate
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthDelegate        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowDelegate          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupDelegate = fmt.Errorf("proto: unexpected end of group")
)
