// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: celinium/interstaking/tx.proto

package types

import (
	context "context"
	fmt "fmt"
	_ "github.com/cosmos/cosmos-proto"
	types1 "github.com/cosmos/cosmos-sdk/codec/types"
	types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/cosmos/cosmos-sdk/x/staking/types"
	_ "github.com/cosmos/gogoproto/gogoproto"
	grpc1 "github.com/gogo/protobuf/grpc"
	proto "github.com/gogo/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type MsgAddSourceChain struct {
	ChainId               string               `protobuf:"bytes,1,opt,name=chain_id,json=chainId,proto3" json:"chain_id,omitempty"`
	ConnectionId          string               `protobuf:"bytes,2,opt,name=connection_id,json=connectionId,proto3" json:"connection_id,omitempty"`
	ChannelId             string               `protobuf:"bytes,3,opt,name=channel_id,json=channelId,proto3" json:"channel_id,omitempty"`
	Version               string               `protobuf:"bytes,4,opt,name=version,proto3" json:"version,omitempty"`
	SourceChainDenom      string               `protobuf:"bytes,5,opt,name=sourceChainDenom,proto3" json:"sourceChainDenom,omitempty"`
	SourceChainTraceDenom string               `protobuf:"bytes,6,opt,name=sourceChainTraceDenom,proto3" json:"sourceChainTraceDenom,omitempty"`
	DelegateStrategy      []DelegationStrategy `protobuf:"bytes,7,rep,name=delegate_strategy,json=delegateStrategy,proto3" json:"delegate_strategy"`
	// authority is the address that controls the module (defaults to x/gov unless overwritten).
	Authority string `protobuf:"bytes,8,opt,name=authority,proto3" json:"authority,omitempty"`
}

func (m *MsgAddSourceChain) Reset()         { *m = MsgAddSourceChain{} }
func (m *MsgAddSourceChain) String() string { return proto.CompactTextString(m) }
func (*MsgAddSourceChain) ProtoMessage()    {}
func (*MsgAddSourceChain) Descriptor() ([]byte, []int) {
	return fileDescriptor_1dc9b7ce96569a53, []int{0}
}
func (m *MsgAddSourceChain) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgAddSourceChain) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgAddSourceChain.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgAddSourceChain) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgAddSourceChain.Merge(m, src)
}
func (m *MsgAddSourceChain) XXX_Size() int {
	return m.Size()
}
func (m *MsgAddSourceChain) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgAddSourceChain.DiscardUnknown(m)
}

var xxx_messageInfo_MsgAddSourceChain proto.InternalMessageInfo

type MsgAddSourceChainResponse struct {
	InterchainAccount string `protobuf:"bytes,1,opt,name=interchain_account,json=interchainAccount,proto3" json:"interchain_account,omitempty"`
}

func (m *MsgAddSourceChainResponse) Reset()         { *m = MsgAddSourceChainResponse{} }
func (m *MsgAddSourceChainResponse) String() string { return proto.CompactTextString(m) }
func (*MsgAddSourceChainResponse) ProtoMessage()    {}
func (*MsgAddSourceChainResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_1dc9b7ce96569a53, []int{1}
}
func (m *MsgAddSourceChainResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgAddSourceChainResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgAddSourceChainResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgAddSourceChainResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgAddSourceChainResponse.Merge(m, src)
}
func (m *MsgAddSourceChainResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgAddSourceChainResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgAddSourceChainResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgAddSourceChainResponse proto.InternalMessageInfo

type MsgUpdateSourceChainDelegatePlan struct {
	ChainId          string               `protobuf:"bytes,1,opt,name=chain_id,json=chainId,proto3" json:"chain_id,omitempty"`
	DelegateStrategy []DelegationStrategy `protobuf:"bytes,2,rep,name=delegate_strategy,json=delegateStrategy,proto3" json:"delegate_strategy"`
	// authority is the address that controls the module (defaults to x/gov unless overwritten).
	Authority string `protobuf:"bytes,3,opt,name=authority,proto3" json:"authority,omitempty"`
}

func (m *MsgUpdateSourceChainDelegatePlan) Reset()         { *m = MsgUpdateSourceChainDelegatePlan{} }
func (m *MsgUpdateSourceChainDelegatePlan) String() string { return proto.CompactTextString(m) }
func (*MsgUpdateSourceChainDelegatePlan) ProtoMessage()    {}
func (*MsgUpdateSourceChainDelegatePlan) Descriptor() ([]byte, []int) {
	return fileDescriptor_1dc9b7ce96569a53, []int{2}
}
func (m *MsgUpdateSourceChainDelegatePlan) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUpdateSourceChainDelegatePlan) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUpdateSourceChainDelegatePlan.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUpdateSourceChainDelegatePlan) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUpdateSourceChainDelegatePlan.Merge(m, src)
}
func (m *MsgUpdateSourceChainDelegatePlan) XXX_Size() int {
	return m.Size()
}
func (m *MsgUpdateSourceChainDelegatePlan) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUpdateSourceChainDelegatePlan.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUpdateSourceChainDelegatePlan proto.InternalMessageInfo

type MsgUpdateSourceChainDelegatePlanResponse struct {
}

func (m *MsgUpdateSourceChainDelegatePlanResponse) Reset() {
	*m = MsgUpdateSourceChainDelegatePlanResponse{}
}
func (m *MsgUpdateSourceChainDelegatePlanResponse) String() string { return proto.CompactTextString(m) }
func (*MsgUpdateSourceChainDelegatePlanResponse) ProtoMessage()    {}
func (*MsgUpdateSourceChainDelegatePlanResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_1dc9b7ce96569a53, []int{3}
}
func (m *MsgUpdateSourceChainDelegatePlanResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUpdateSourceChainDelegatePlanResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUpdateSourceChainDelegatePlanResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUpdateSourceChainDelegatePlanResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUpdateSourceChainDelegatePlanResponse.Merge(m, src)
}
func (m *MsgUpdateSourceChainDelegatePlanResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgUpdateSourceChainDelegatePlanResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUpdateSourceChainDelegatePlanResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUpdateSourceChainDelegatePlanResponse proto.InternalMessageInfo

type MsgDelegate struct {
	ChainId   string     `protobuf:"bytes,1,opt,name=chain_id,json=chainId,proto3" json:"chain_id,omitempty"`
	Coin      types.Coin `protobuf:"bytes,2,opt,name=Coin,proto3" json:"Coin"`
	Delegator string     `protobuf:"bytes,3,opt,name=delegator,proto3" json:"delegator,omitempty"`
}

func (m *MsgDelegate) Reset()         { *m = MsgDelegate{} }
func (m *MsgDelegate) String() string { return proto.CompactTextString(m) }
func (*MsgDelegate) ProtoMessage()    {}
func (*MsgDelegate) Descriptor() ([]byte, []int) {
	return fileDescriptor_1dc9b7ce96569a53, []int{4}
}
func (m *MsgDelegate) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgDelegate) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgDelegate.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgDelegate) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgDelegate.Merge(m, src)
}
func (m *MsgDelegate) XXX_Size() int {
	return m.Size()
}
func (m *MsgDelegate) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgDelegate.DiscardUnknown(m)
}

var xxx_messageInfo_MsgDelegate proto.InternalMessageInfo

type MsgDelegateResponse struct {
}

func (m *MsgDelegateResponse) Reset()         { *m = MsgDelegateResponse{} }
func (m *MsgDelegateResponse) String() string { return proto.CompactTextString(m) }
func (*MsgDelegateResponse) ProtoMessage()    {}
func (*MsgDelegateResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_1dc9b7ce96569a53, []int{5}
}
func (m *MsgDelegateResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgDelegateResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgDelegateResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgDelegateResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgDelegateResponse.Merge(m, src)
}
func (m *MsgDelegateResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgDelegateResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgDelegateResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgDelegateResponse proto.InternalMessageInfo

type MsgUnDelegate struct {
	ChainId string     `protobuf:"bytes,1,opt,name=chain_id,json=chainId,proto3" json:"chain_id,omitempty"`
	Amount  types.Coin `protobuf:"bytes,2,opt,name=amount,proto3" json:"amount"`
	Signer  string     `protobuf:"bytes,3,opt,name=signer,proto3" json:"signer,omitempty"`
}

func (m *MsgUnDelegate) Reset()         { *m = MsgUnDelegate{} }
func (m *MsgUnDelegate) String() string { return proto.CompactTextString(m) }
func (*MsgUnDelegate) ProtoMessage()    {}
func (*MsgUnDelegate) Descriptor() ([]byte, []int) {
	return fileDescriptor_1dc9b7ce96569a53, []int{6}
}
func (m *MsgUnDelegate) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUnDelegate) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUnDelegate.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUnDelegate) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUnDelegate.Merge(m, src)
}
func (m *MsgUnDelegate) XXX_Size() int {
	return m.Size()
}
func (m *MsgUnDelegate) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUnDelegate.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUnDelegate proto.InternalMessageInfo

type MsgUnDelegateResponse struct {
}

func (m *MsgUnDelegateResponse) Reset()         { *m = MsgUnDelegateResponse{} }
func (m *MsgUnDelegateResponse) String() string { return proto.CompactTextString(m) }
func (*MsgUnDelegateResponse) ProtoMessage()    {}
func (*MsgUnDelegateResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_1dc9b7ce96569a53, []int{7}
}
func (m *MsgUnDelegateResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUnDelegateResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUnDelegateResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUnDelegateResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUnDelegateResponse.Merge(m, src)
}
func (m *MsgUnDelegateResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgUnDelegateResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUnDelegateResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUnDelegateResponse proto.InternalMessageInfo

type MsgNotifyUnDelegationDone struct {
	ChainId             string      `protobuf:"bytes,1,opt,name=chain_id,json=chainId,proto3" json:"chain_id,omitempty"`
	BlockHeight         uint32      `protobuf:"varint,2,opt,name=block_height,json=blockHeight,proto3" json:"block_height,omitempty"`
	UnboundingId        uint64      `protobuf:"varint,3,opt,name=unbounding_id,json=unboundingId,proto3" json:"unbounding_id,omitempty"`
	ProofInit           []byte      `protobuf:"bytes,4,opt,name=proof_init,json=proofInit,proto3" json:"proof_init,omitempty"`
	UnbondingDelegation *types1.Any `protobuf:"bytes,5,opt,name=unbonding_delegation,json=unbondingDelegation,proto3" json:"unbonding_delegation,omitempty"`
	Signer              string      `protobuf:"bytes,6,opt,name=signer,proto3" json:"signer,omitempty"`
}

func (m *MsgNotifyUnDelegationDone) Reset()         { *m = MsgNotifyUnDelegationDone{} }
func (m *MsgNotifyUnDelegationDone) String() string { return proto.CompactTextString(m) }
func (*MsgNotifyUnDelegationDone) ProtoMessage()    {}
func (*MsgNotifyUnDelegationDone) Descriptor() ([]byte, []int) {
	return fileDescriptor_1dc9b7ce96569a53, []int{8}
}
func (m *MsgNotifyUnDelegationDone) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgNotifyUnDelegationDone) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgNotifyUnDelegationDone.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgNotifyUnDelegationDone) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgNotifyUnDelegationDone.Merge(m, src)
}
func (m *MsgNotifyUnDelegationDone) XXX_Size() int {
	return m.Size()
}
func (m *MsgNotifyUnDelegationDone) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgNotifyUnDelegationDone.DiscardUnknown(m)
}

var xxx_messageInfo_MsgNotifyUnDelegationDone proto.InternalMessageInfo

type MsgNotifyDelegationDoneResponse struct {
}

func (m *MsgNotifyDelegationDoneResponse) Reset()         { *m = MsgNotifyDelegationDoneResponse{} }
func (m *MsgNotifyDelegationDoneResponse) String() string { return proto.CompactTextString(m) }
func (*MsgNotifyDelegationDoneResponse) ProtoMessage()    {}
func (*MsgNotifyDelegationDoneResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_1dc9b7ce96569a53, []int{9}
}
func (m *MsgNotifyDelegationDoneResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgNotifyDelegationDoneResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgNotifyDelegationDoneResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgNotifyDelegationDoneResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgNotifyDelegationDoneResponse.Merge(m, src)
}
func (m *MsgNotifyDelegationDoneResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgNotifyDelegationDoneResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgNotifyDelegationDoneResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgNotifyDelegationDoneResponse proto.InternalMessageInfo

func init() {
	proto.RegisterType((*MsgAddSourceChain)(nil), "celinlim.interstaking.MsgAddSourceChain")
	proto.RegisterType((*MsgAddSourceChainResponse)(nil), "celinlim.interstaking.MsgAddSourceChainResponse")
	proto.RegisterType((*MsgUpdateSourceChainDelegatePlan)(nil), "celinlim.interstaking.MsgUpdateSourceChainDelegatePlan")
	proto.RegisterType((*MsgUpdateSourceChainDelegatePlanResponse)(nil), "celinlim.interstaking.MsgUpdateSourceChainDelegatePlanResponse")
	proto.RegisterType((*MsgDelegate)(nil), "celinlim.interstaking.MsgDelegate")
	proto.RegisterType((*MsgDelegateResponse)(nil), "celinlim.interstaking.MsgDelegateResponse")
	proto.RegisterType((*MsgUnDelegate)(nil), "celinlim.interstaking.MsgUnDelegate")
	proto.RegisterType((*MsgUnDelegateResponse)(nil), "celinlim.interstaking.MsgUnDelegateResponse")
	proto.RegisterType((*MsgNotifyUnDelegationDone)(nil), "celinlim.interstaking.MsgNotifyUnDelegationDone")
	proto.RegisterType((*MsgNotifyDelegationDoneResponse)(nil), "celinlim.interstaking.MsgNotifyDelegationDoneResponse")
}

func init() { proto.RegisterFile("celinium/interstaking/tx.proto", fileDescriptor_1dc9b7ce96569a53) }

var fileDescriptor_1dc9b7ce96569a53 = []byte{
	// 829 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x56, 0x4f, 0x6f, 0xe3, 0x44,
	0x14, 0x8f, 0x9b, 0x90, 0x26, 0x2f, 0x29, 0xda, 0xce, 0x26, 0x4b, 0x12, 0xb1, 0x4e, 0x37, 0xec,
	0x21, 0x54, 0xac, 0xc3, 0x66, 0xd1, 0x2e, 0xe2, 0x82, 0xd2, 0xad, 0xb4, 0xe4, 0x10, 0x84, 0x5c,
	0xf6, 0x52, 0x21, 0x05, 0xc7, 0x9e, 0x3a, 0xa3, 0x3a, 0x33, 0x91, 0x67, 0x52, 0x35, 0x57, 0x24,
	0xa4, 0x9e, 0x10, 0x57, 0x6e, 0xfd, 0x10, 0x7c, 0x88, 0x1e, 0xab, 0x9e, 0xb8, 0x80, 0x50, 0x7b,
	0xe1, 0x63, 0x20, 0xcf, 0xd8, 0x8e, 0x4b, 0x13, 0x37, 0xaa, 0xc4, 0xcd, 0xef, 0xfd, 0x7e, 0x6f,
	0xe6, 0xf7, 0xfe, 0xcc, 0x93, 0x41, 0xb7, 0xb1, 0x47, 0x28, 0x99, 0x4d, 0x3a, 0x84, 0x0a, 0xec,
	0x73, 0x61, 0x1d, 0x13, 0xea, 0x76, 0xc4, 0xa9, 0x31, 0xf5, 0x99, 0x60, 0xa8, 0x2a, 0x71, 0x8f,
	0x4c, 0x8c, 0x24, 0xde, 0x78, 0x6e, 0x33, 0x3e, 0x61, 0xbc, 0x13, 0xf1, 0x4f, 0x5e, 0x8e, 0xb0,
	0xb0, 0x5e, 0x46, 0xb6, 0x0a, 0x6e, 0xe8, 0x21, 0x6b, 0x64, 0x71, 0x1c, 0x53, 0x6c, 0x46, 0x68,
	0x88, 0xd7, 0x15, 0x3e, 0x94, 0x56, 0x47, 0x19, 0x21, 0x54, 0x71, 0x99, 0xcb, 0x94, 0x3f, 0xf8,
	0x8a, 0x02, 0x5c, 0xc6, 0x5c, 0x0f, 0x77, 0xa4, 0x35, 0x9a, 0x1d, 0x75, 0x2c, 0x3a, 0x0f, 0xa1,
	0xf6, 0xf2, 0x44, 0x38, 0x9b, 0xf9, 0x36, 0x1e, 0xda, 0x63, 0x2b, 0xba, 0xb5, 0xf5, 0x4b, 0x16,
	0xb6, 0x07, 0xdc, 0xed, 0x39, 0xce, 0x81, 0x04, 0xdf, 0x06, 0x18, 0xaa, 0x43, 0x41, 0x92, 0x86,
	0xc4, 0xa9, 0x69, 0x3b, 0x5a, 0xbb, 0x68, 0x6e, 0x4a, 0xbb, 0xef, 0xa0, 0x4f, 0x60, 0xcb, 0x66,
	0x94, 0x62, 0x5b, 0x10, 0x26, 0xf1, 0x0d, 0x89, 0x97, 0x17, 0xce, 0xbe, 0x83, 0x9e, 0x02, 0xd8,
	0x63, 0x8b, 0x52, 0xec, 0x05, 0x8c, 0xac, 0x64, 0x14, 0x43, 0x4f, 0xdf, 0x41, 0x35, 0xd8, 0x3c,
	0xc1, 0x3e, 0x27, 0x8c, 0xd6, 0x72, 0xea, 0xf4, 0xd0, 0x44, 0xbb, 0xf0, 0x88, 0x2f, 0x74, 0xec,
	0x63, 0xca, 0x26, 0xb5, 0x0f, 0x24, 0xe5, 0x8e, 0x1f, 0x7d, 0x01, 0xd5, 0x84, 0xef, 0x7b, 0xdf,
	0xb2, 0xb1, 0x0a, 0xc8, 0xcb, 0x80, 0xe5, 0x20, 0xfa, 0x01, 0xb6, 0x1d, 0xec, 0x61, 0xd7, 0x12,
	0x78, 0xc8, 0x85, 0x6f, 0x09, 0xec, 0xce, 0x6b, 0x9b, 0x3b, 0xd9, 0x76, 0xa9, 0xfb, 0xa9, 0xb1,
	0xb4, 0xbf, 0xc6, 0xbe, 0xe2, 0x13, 0x46, 0x0f, 0xc2, 0x80, 0xbd, 0xdc, 0xc5, 0x5f, 0xcd, 0x8c,
	0xf9, 0x28, 0x3a, 0x29, 0xf2, 0xa3, 0xd7, 0x50, 0xb4, 0x66, 0x62, 0xcc, 0x7c, 0x22, 0xe6, 0xb5,
	0x42, 0xa0, 0x63, 0xaf, 0x76, 0xf5, 0xfb, 0x8b, 0x4a, 0xd8, 0xce, 0x9e, 0xe3, 0xf8, 0x98, 0xf3,
	0x03, 0xe1, 0x13, 0xea, 0x9a, 0x0b, 0xea, 0x57, 0x85, 0xb3, 0xf3, 0x66, 0xe6, 0x9f, 0xf3, 0x66,
	0xa6, 0x45, 0xa1, 0x7e, 0xa7, 0x1f, 0x26, 0xe6, 0x53, 0x46, 0x39, 0x46, 0xef, 0x00, 0x49, 0x65,
	0xaa, 0x39, 0x96, 0x6d, 0xb3, 0x19, 0x15, 0xaa, 0x43, 0x29, 0xf7, 0x6c, 0x2f, 0x62, 0x7a, 0x2a,
	0x24, 0x71, 0xdf, 0x9f, 0x1a, 0xec, 0x0c, 0xb8, 0xfb, 0x7e, 0xea, 0x04, 0x79, 0x24, 0x6b, 0xac,
	0x52, 0xfb, 0xce, 0xb3, 0x52, 0xe7, 0x61, 0x69, 0x3d, 0x37, 0xfe, 0x97, 0x7a, 0x66, 0x1f, 0x52,
	0xcf, 0x5d, 0x68, 0xdf, 0x97, 0x5e, 0x54, 0xde, 0xd6, 0xcf, 0x1a, 0x94, 0x06, 0xdc, 0x8d, 0xb0,
	0xb4, 0xb4, 0x5f, 0x41, 0xee, 0x2d, 0x23, 0x54, 0x4e, 0x7f, 0xa9, 0x5b, 0x37, 0x42, 0x41, 0xc1,
	0xe3, 0x36, 0xc2, 0xc7, 0x6d, 0x04, 0x84, 0x30, 0x33, 0x49, 0x46, 0x1f, 0x43, 0x31, 0xcc, 0x90,
	0xf9, 0xd1, 0xab, 0x88, 0x1d, 0x09, 0xcd, 0x55, 0x78, 0x9c, 0x90, 0x91, 0x94, 0xb7, 0x15, 0xe4,
	0x42, 0xd7, 0x11, 0xf8, 0x06, 0xf2, 0xd6, 0x44, 0x8e, 0xc7, 0x9a, 0x12, 0x43, 0x3a, 0x7a, 0x02,
	0x79, 0x4e, 0x5c, 0x8a, 0x23, 0x85, 0xa1, 0x95, 0x90, 0xf7, 0x11, 0x54, 0x6f, 0xc9, 0x88, 0x05,
	0x9e, 0x6d, 0xc8, 0xe1, 0xfd, 0x96, 0x09, 0x72, 0x34, 0x8f, 0x71, 0xc2, 0xe8, 0x3e, 0xa3, 0xa9,
	0x62, 0x9f, 0x41, 0x79, 0xe4, 0x31, 0xfb, 0x78, 0x38, 0xc6, 0xc4, 0x1d, 0x2b, 0xc9, 0x5b, 0x66,
	0x49, 0xfa, 0xbe, 0x91, 0xae, 0x60, 0xef, 0xcc, 0xe8, 0x88, 0xcd, 0xa8, 0x43, 0xa8, 0x1b, 0x6d,
	0x95, 0x9c, 0x59, 0x5e, 0x38, 0xd5, 0xde, 0x99, 0xfa, 0x8c, 0x1d, 0x0d, 0x09, 0x25, 0x42, 0xee,
	0x96, 0xb2, 0x59, 0x94, 0x9e, 0x3e, 0x25, 0x02, 0xbd, 0x83, 0x4a, 0x40, 0x57, 0x47, 0x38, 0xb1,
	0x3a, 0xb9, 0x61, 0x4a, 0xdd, 0x8a, 0xa1, 0x16, 0xaa, 0x11, 0x2d, 0x54, 0xa3, 0x47, 0xe7, 0xe6,
	0xe3, 0x38, 0x62, 0x91, 0x4e, 0xa2, 0x46, 0xf9, 0x15, 0x35, 0x7a, 0x06, 0xcd, 0xb8, 0x12, 0xb7,
	0xeb, 0x10, 0x55, 0xab, 0x7b, 0x95, 0x83, 0xec, 0x80, 0xbb, 0xc8, 0x83, 0x0f, 0xff, 0xb3, 0x7e,
	0xdb, 0x2b, 0x1e, 0xce, 0x9d, 0xc5, 0xd0, 0xf8, 0x7c, 0x5d, 0x66, 0xbc, 0x42, 0x7e, 0xd3, 0xe0,
	0x69, 0xfa, 0x63, 0x7f, 0xb3, 0xfa, 0xcc, 0xd4, 0xc0, 0xc6, 0xd7, 0x0f, 0x0c, 0x8c, 0xb5, 0x1d,
	0x42, 0x21, 0x1e, 0xed, 0xd6, 0xea, 0xc3, 0x22, 0x4e, 0x63, 0xf7, 0x7e, 0x4e, 0x7c, 0xf6, 0x8f,
	0x00, 0xef, 0x69, 0xb4, 0x5f, 0xd0, 0xf3, 0x14, 0xa9, 0xb1, 0xb6, 0xc6, 0x67, 0xeb, 0xb0, 0xe2,
	0x1b, 0x7e, 0xd2, 0xe0, 0xc9, 0x8a, 0xd1, 0x4f, 0x69, 0xd3, 0xf2, 0x88, 0xc6, 0xeb, 0xfb, 0x22,
	0x96, 0x0f, 0xd5, 0xde, 0x97, 0x17, 0xd7, 0xba, 0x76, 0x79, 0xad, 0x6b, 0x7f, 0x5f, 0xeb, 0xda,
	0xaf, 0x37, 0x7a, 0xe6, 0xf2, 0x46, 0xcf, 0xfc, 0x71, 0xa3, 0x67, 0x0e, 0x17, 0x3f, 0x37, 0xa7,
	0xea, 0xaf, 0xe0, 0x45, 0xfc, 0x7f, 0x33, 0x9f, 0x62, 0x3e, 0xca, 0xcb, 0xb1, 0x7f, 0xf5, 0x6f,
	0x00, 0x00, 0x00, 0xff, 0xff, 0x5b, 0x35, 0xa3, 0x66, 0x05, 0x09, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// MsgClient is the client API for Msg service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MsgClient interface {
	AddSourceChain(ctx context.Context, in *MsgAddSourceChain, opts ...grpc.CallOption) (*MsgAddSourceChainResponse, error)
	UpdateSourceChainDelegatePlan(ctx context.Context, in *MsgUpdateSourceChainDelegatePlan, opts ...grpc.CallOption) (*MsgUpdateSourceChainDelegatePlanResponse, error)
	Delegate(ctx context.Context, in *MsgDelegate, opts ...grpc.CallOption) (*MsgDelegateResponse, error)
	Undelegate(ctx context.Context, in *MsgUnDelegate, opts ...grpc.CallOption) (*MsgUnDelegateResponse, error)
	NotifyUnDelegationDone(ctx context.Context, in *MsgNotifyUnDelegationDone, opts ...grpc.CallOption) (*MsgNotifyDelegationDoneResponse, error)
}

type msgClient struct {
	cc grpc1.ClientConn
}

func NewMsgClient(cc grpc1.ClientConn) MsgClient {
	return &msgClient{cc}
}

func (c *msgClient) AddSourceChain(ctx context.Context, in *MsgAddSourceChain, opts ...grpc.CallOption) (*MsgAddSourceChainResponse, error) {
	out := new(MsgAddSourceChainResponse)
	err := c.cc.Invoke(ctx, "/celinlim.interstaking.Msg/AddSourceChain", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) UpdateSourceChainDelegatePlan(ctx context.Context, in *MsgUpdateSourceChainDelegatePlan, opts ...grpc.CallOption) (*MsgUpdateSourceChainDelegatePlanResponse, error) {
	out := new(MsgUpdateSourceChainDelegatePlanResponse)
	err := c.cc.Invoke(ctx, "/celinlim.interstaking.Msg/UpdateSourceChainDelegatePlan", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) Delegate(ctx context.Context, in *MsgDelegate, opts ...grpc.CallOption) (*MsgDelegateResponse, error) {
	out := new(MsgDelegateResponse)
	err := c.cc.Invoke(ctx, "/celinlim.interstaking.Msg/Delegate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) Undelegate(ctx context.Context, in *MsgUnDelegate, opts ...grpc.CallOption) (*MsgUnDelegateResponse, error) {
	out := new(MsgUnDelegateResponse)
	err := c.cc.Invoke(ctx, "/celinlim.interstaking.Msg/Undelegate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) NotifyUnDelegationDone(ctx context.Context, in *MsgNotifyUnDelegationDone, opts ...grpc.CallOption) (*MsgNotifyDelegationDoneResponse, error) {
	out := new(MsgNotifyDelegationDoneResponse)
	err := c.cc.Invoke(ctx, "/celinlim.interstaking.Msg/NotifyUnDelegationDone", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MsgServer is the server API for Msg service.
type MsgServer interface {
	AddSourceChain(context.Context, *MsgAddSourceChain) (*MsgAddSourceChainResponse, error)
	UpdateSourceChainDelegatePlan(context.Context, *MsgUpdateSourceChainDelegatePlan) (*MsgUpdateSourceChainDelegatePlanResponse, error)
	Delegate(context.Context, *MsgDelegate) (*MsgDelegateResponse, error)
	Undelegate(context.Context, *MsgUnDelegate) (*MsgUnDelegateResponse, error)
	NotifyUnDelegationDone(context.Context, *MsgNotifyUnDelegationDone) (*MsgNotifyDelegationDoneResponse, error)
}

// UnimplementedMsgServer can be embedded to have forward compatible implementations.
type UnimplementedMsgServer struct {
}

func (*UnimplementedMsgServer) AddSourceChain(ctx context.Context, req *MsgAddSourceChain) (*MsgAddSourceChainResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddSourceChain not implemented")
}
func (*UnimplementedMsgServer) UpdateSourceChainDelegatePlan(ctx context.Context, req *MsgUpdateSourceChainDelegatePlan) (*MsgUpdateSourceChainDelegatePlanResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateSourceChainDelegatePlan not implemented")
}
func (*UnimplementedMsgServer) Delegate(ctx context.Context, req *MsgDelegate) (*MsgDelegateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delegate not implemented")
}
func (*UnimplementedMsgServer) Undelegate(ctx context.Context, req *MsgUnDelegate) (*MsgUnDelegateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Undelegate not implemented")
}
func (*UnimplementedMsgServer) NotifyUnDelegationDone(ctx context.Context, req *MsgNotifyUnDelegationDone) (*MsgNotifyDelegationDoneResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NotifyUnDelegationDone not implemented")
}

func RegisterMsgServer(s grpc1.Server, srv MsgServer) {
	s.RegisterService(&_Msg_serviceDesc, srv)
}

func _Msg_AddSourceChain_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgAddSourceChain)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).AddSourceChain(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/celinlim.interstaking.Msg/AddSourceChain",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).AddSourceChain(ctx, req.(*MsgAddSourceChain))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_UpdateSourceChainDelegatePlan_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgUpdateSourceChainDelegatePlan)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).UpdateSourceChainDelegatePlan(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/celinlim.interstaking.Msg/UpdateSourceChainDelegatePlan",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).UpdateSourceChainDelegatePlan(ctx, req.(*MsgUpdateSourceChainDelegatePlan))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_Delegate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgDelegate)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).Delegate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/celinlim.interstaking.Msg/Delegate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).Delegate(ctx, req.(*MsgDelegate))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_Undelegate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgUnDelegate)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).Undelegate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/celinlim.interstaking.Msg/Undelegate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).Undelegate(ctx, req.(*MsgUnDelegate))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_NotifyUnDelegationDone_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgNotifyUnDelegationDone)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).NotifyUnDelegationDone(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/celinlim.interstaking.Msg/NotifyUnDelegationDone",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).NotifyUnDelegationDone(ctx, req.(*MsgNotifyUnDelegationDone))
	}
	return interceptor(ctx, in, info, handler)
}

var _Msg_serviceDesc = grpc.ServiceDesc{
	ServiceName: "celinlim.interstaking.Msg",
	HandlerType: (*MsgServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddSourceChain",
			Handler:    _Msg_AddSourceChain_Handler,
		},
		{
			MethodName: "UpdateSourceChainDelegatePlan",
			Handler:    _Msg_UpdateSourceChainDelegatePlan_Handler,
		},
		{
			MethodName: "Delegate",
			Handler:    _Msg_Delegate_Handler,
		},
		{
			MethodName: "Undelegate",
			Handler:    _Msg_Undelegate_Handler,
		},
		{
			MethodName: "NotifyUnDelegationDone",
			Handler:    _Msg_NotifyUnDelegationDone_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "celinium/interstaking/tx.proto",
}

func (m *MsgAddSourceChain) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgAddSourceChain) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgAddSourceChain) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Authority) > 0 {
		i -= len(m.Authority)
		copy(dAtA[i:], m.Authority)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Authority)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.DelegateStrategy) > 0 {
		for iNdEx := len(m.DelegateStrategy) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.DelegateStrategy[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTx(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x3a
		}
	}
	if len(m.SourceChainTraceDenom) > 0 {
		i -= len(m.SourceChainTraceDenom)
		copy(dAtA[i:], m.SourceChainTraceDenom)
		i = encodeVarintTx(dAtA, i, uint64(len(m.SourceChainTraceDenom)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.SourceChainDenom) > 0 {
		i -= len(m.SourceChainDenom)
		copy(dAtA[i:], m.SourceChainDenom)
		i = encodeVarintTx(dAtA, i, uint64(len(m.SourceChainDenom)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Version) > 0 {
		i -= len(m.Version)
		copy(dAtA[i:], m.Version)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Version)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.ChannelId) > 0 {
		i -= len(m.ChannelId)
		copy(dAtA[i:], m.ChannelId)
		i = encodeVarintTx(dAtA, i, uint64(len(m.ChannelId)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.ConnectionId) > 0 {
		i -= len(m.ConnectionId)
		copy(dAtA[i:], m.ConnectionId)
		i = encodeVarintTx(dAtA, i, uint64(len(m.ConnectionId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.ChainId) > 0 {
		i -= len(m.ChainId)
		copy(dAtA[i:], m.ChainId)
		i = encodeVarintTx(dAtA, i, uint64(len(m.ChainId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgAddSourceChainResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgAddSourceChainResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgAddSourceChainResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.InterchainAccount) > 0 {
		i -= len(m.InterchainAccount)
		copy(dAtA[i:], m.InterchainAccount)
		i = encodeVarintTx(dAtA, i, uint64(len(m.InterchainAccount)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgUpdateSourceChainDelegatePlan) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUpdateSourceChainDelegatePlan) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpdateSourceChainDelegatePlan) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Authority) > 0 {
		i -= len(m.Authority)
		copy(dAtA[i:], m.Authority)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Authority)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.DelegateStrategy) > 0 {
		for iNdEx := len(m.DelegateStrategy) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.DelegateStrategy[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTx(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.ChainId) > 0 {
		i -= len(m.ChainId)
		copy(dAtA[i:], m.ChainId)
		i = encodeVarintTx(dAtA, i, uint64(len(m.ChainId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgUpdateSourceChainDelegatePlanResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUpdateSourceChainDelegatePlanResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpdateSourceChainDelegatePlanResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgDelegate) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgDelegate) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgDelegate) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Delegator) > 0 {
		i -= len(m.Delegator)
		copy(dAtA[i:], m.Delegator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Delegator)))
		i--
		dAtA[i] = 0x1a
	}
	{
		size, err := m.Coin.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if len(m.ChainId) > 0 {
		i -= len(m.ChainId)
		copy(dAtA[i:], m.ChainId)
		i = encodeVarintTx(dAtA, i, uint64(len(m.ChainId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgDelegateResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgDelegateResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgDelegateResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgUnDelegate) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUnDelegate) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUnDelegate) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Signer) > 0 {
		i -= len(m.Signer)
		copy(dAtA[i:], m.Signer)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Signer)))
		i--
		dAtA[i] = 0x1a
	}
	{
		size, err := m.Amount.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if len(m.ChainId) > 0 {
		i -= len(m.ChainId)
		copy(dAtA[i:], m.ChainId)
		i = encodeVarintTx(dAtA, i, uint64(len(m.ChainId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgUnDelegateResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUnDelegateResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUnDelegateResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgNotifyUnDelegationDone) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgNotifyUnDelegationDone) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgNotifyUnDelegationDone) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Signer) > 0 {
		i -= len(m.Signer)
		copy(dAtA[i:], m.Signer)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Signer)))
		i--
		dAtA[i] = 0x32
	}
	if m.UnbondingDelegation != nil {
		{
			size, err := m.UnbondingDelegation.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTx(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if len(m.ProofInit) > 0 {
		i -= len(m.ProofInit)
		copy(dAtA[i:], m.ProofInit)
		i = encodeVarintTx(dAtA, i, uint64(len(m.ProofInit)))
		i--
		dAtA[i] = 0x22
	}
	if m.UnboundingId != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.UnboundingId))
		i--
		dAtA[i] = 0x18
	}
	if m.BlockHeight != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.BlockHeight))
		i--
		dAtA[i] = 0x10
	}
	if len(m.ChainId) > 0 {
		i -= len(m.ChainId)
		copy(dAtA[i:], m.ChainId)
		i = encodeVarintTx(dAtA, i, uint64(len(m.ChainId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgNotifyDelegationDoneResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgNotifyDelegationDoneResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgNotifyDelegationDoneResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func encodeVarintTx(dAtA []byte, offset int, v uint64) int {
	offset -= sovTx(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *MsgAddSourceChain) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ChainId)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.ConnectionId)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.ChannelId)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Version)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.SourceChainDenom)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.SourceChainTraceDenom)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if len(m.DelegateStrategy) > 0 {
		for _, e := range m.DelegateStrategy {
			l = e.Size()
			n += 1 + l + sovTx(uint64(l))
		}
	}
	l = len(m.Authority)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgAddSourceChainResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.InterchainAccount)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgUpdateSourceChainDelegatePlan) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ChainId)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if len(m.DelegateStrategy) > 0 {
		for _, e := range m.DelegateStrategy {
			l = e.Size()
			n += 1 + l + sovTx(uint64(l))
		}
	}
	l = len(m.Authority)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgUpdateSourceChainDelegatePlanResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgDelegate) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ChainId)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = m.Coin.Size()
	n += 1 + l + sovTx(uint64(l))
	l = len(m.Delegator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgDelegateResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgUnDelegate) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ChainId)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = m.Amount.Size()
	n += 1 + l + sovTx(uint64(l))
	l = len(m.Signer)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgUnDelegateResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgNotifyUnDelegationDone) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ChainId)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.BlockHeight != 0 {
		n += 1 + sovTx(uint64(m.BlockHeight))
	}
	if m.UnboundingId != 0 {
		n += 1 + sovTx(uint64(m.UnboundingId))
	}
	l = len(m.ProofInit)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.UnbondingDelegation != nil {
		l = m.UnbondingDelegation.Size()
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Signer)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgNotifyDelegationDoneResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func sovTx(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTx(x uint64) (n int) {
	return sovTx(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *MsgAddSourceChain) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgAddSourceChain: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgAddSourceChain: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChainId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConnectionId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ConnectionId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChannelId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChannelId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Version", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Version = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SourceChainDenom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SourceChainDenom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SourceChainTraceDenom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SourceChainTraceDenom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DelegateStrategy", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DelegateStrategy = append(m.DelegateStrategy, DelegationStrategy{})
			if err := m.DelegateStrategy[len(m.DelegateStrategy)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Authority", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Authority = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgAddSourceChainResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgAddSourceChainResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgAddSourceChainResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InterchainAccount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.InterchainAccount = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUpdateSourceChainDelegatePlan) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUpdateSourceChainDelegatePlan: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUpdateSourceChainDelegatePlan: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChainId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DelegateStrategy", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DelegateStrategy = append(m.DelegateStrategy, DelegationStrategy{})
			if err := m.DelegateStrategy[len(m.DelegateStrategy)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Authority", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Authority = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUpdateSourceChainDelegatePlanResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUpdateSourceChainDelegatePlanResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUpdateSourceChainDelegatePlanResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgDelegate) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgDelegate: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgDelegate: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChainId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Coin", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Coin.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Delegator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Delegator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgDelegateResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgDelegateResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgDelegateResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUnDelegate) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUnDelegate: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUnDelegate: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChainId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Amount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signer", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Signer = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUnDelegateResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUnDelegateResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUnDelegateResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgNotifyUnDelegationDone) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgNotifyUnDelegationDone: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgNotifyUnDelegationDone: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChainId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockHeight", wireType)
			}
			m.BlockHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BlockHeight |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UnboundingId", wireType)
			}
			m.UnboundingId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UnboundingId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProofInit", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ProofInit = append(m.ProofInit[:0], dAtA[iNdEx:postIndex]...)
			if m.ProofInit == nil {
				m.ProofInit = []byte{}
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UnbondingDelegation", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.UnbondingDelegation == nil {
				m.UnbondingDelegation = &types1.Any{}
			}
			if err := m.UnbondingDelegation.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signer", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Signer = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgNotifyDelegationDoneResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgNotifyDelegationDoneResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgNotifyDelegationDoneResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTx(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTx
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTx
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTx
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTx
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTx        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTx          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTx = fmt.Errorf("proto: unexpected end of group")
)
