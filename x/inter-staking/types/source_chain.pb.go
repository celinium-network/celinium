// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: celinium/interstaking/source_chain.proto

package types

import (
	fmt "fmt"
	_ "github.com/cosmos/cosmos-proto"
	_ "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type DelegationStrategy struct {
	Percentage       uint32 `protobuf:"varint,1,opt,name=percentage,proto3" json:"percentage,omitempty"`
	ValidatorAddress string `protobuf:"bytes,2,opt,name=validator_address,json=validatorAddress,proto3" json:"validator_address,omitempty"`
}

func (m *DelegationStrategy) Reset()         { *m = DelegationStrategy{} }
func (m *DelegationStrategy) String() string { return proto.CompactTextString(m) }
func (*DelegationStrategy) ProtoMessage()    {}
func (*DelegationStrategy) Descriptor() ([]byte, []int) {
	return fileDescriptor_fe65ea8bc8bbff20, []int{0}
}
func (m *DelegationStrategy) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DelegationStrategy) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DelegationStrategy.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DelegationStrategy) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DelegationStrategy.Merge(m, src)
}
func (m *DelegationStrategy) XXX_Size() int {
	return m.Size()
}
func (m *DelegationStrategy) XXX_DiscardUnknown() {
	xxx_messageInfo_DelegationStrategy.DiscardUnknown(m)
}

var xxx_messageInfo_DelegationStrategy proto.InternalMessageInfo

func (m *DelegationStrategy) GetPercentage() uint32 {
	if m != nil {
		return m.Percentage
	}
	return 0
}

func (m *DelegationStrategy) GetValidatorAddress() string {
	if m != nil {
		return m.ValidatorAddress
	}
	return ""
}

type SourceChainMetadata struct {
	IbcClientId          string `protobuf:"bytes,1,opt,name=ibcClientId,proto3" json:"ibcClientId,omitempty"`
	IbcConnectionId      string `protobuf:"bytes,2,opt,name=ibcConnectionId,proto3" json:"ibcConnectionId,omitempty"`
	IbcTransferChannelId string `protobuf:"bytes,3,opt,name=ibcTransferChannelId,proto3" json:"ibcTransferChannelId,omitempty"`
	// The inter chain account at control chain
	ICAControlAddr        string `protobuf:"bytes,4,opt,name=ICAControlAddr,proto3" json:"ICAControlAddr,omitempty"`
	SourceChainDenom      string `protobuf:"bytes,5,opt,name=sourceChainDenom,proto3" json:"sourceChainDenom,omitempty"`
	SourceChainTraceDenom string `protobuf:"bytes,6,opt,name=sourceChainTraceDenom,proto3" json:"sourceChainTraceDenom,omitempty"`
	// The strategy for assigning delegation
	DelegateStrategy []DelegationStrategy `protobuf:"bytes,7,rep,name=delegate_strategy,json=delegateStrategy,proto3" json:"delegate_strategy"`
}

func (m *SourceChainMetadata) Reset()         { *m = SourceChainMetadata{} }
func (m *SourceChainMetadata) String() string { return proto.CompactTextString(m) }
func (*SourceChainMetadata) ProtoMessage()    {}
func (*SourceChainMetadata) Descriptor() ([]byte, []int) {
	return fileDescriptor_fe65ea8bc8bbff20, []int{1}
}
func (m *SourceChainMetadata) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SourceChainMetadata) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SourceChainMetadata.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SourceChainMetadata) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SourceChainMetadata.Merge(m, src)
}
func (m *SourceChainMetadata) XXX_Size() int {
	return m.Size()
}
func (m *SourceChainMetadata) XXX_DiscardUnknown() {
	xxx_messageInfo_SourceChainMetadata.DiscardUnknown(m)
}

var xxx_messageInfo_SourceChainMetadata proto.InternalMessageInfo

type SourceChainDelegation struct {
	Delegations []*ICADelegation `protobuf:"bytes,1,rep,name=delegations,proto3" json:"delegations,omitempty"`
}

func (m *SourceChainDelegation) Reset()         { *m = SourceChainDelegation{} }
func (m *SourceChainDelegation) String() string { return proto.CompactTextString(m) }
func (*SourceChainDelegation) ProtoMessage()    {}
func (*SourceChainDelegation) Descriptor() ([]byte, []int) {
	return fileDescriptor_fe65ea8bc8bbff20, []int{2}
}
func (m *SourceChainDelegation) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SourceChainDelegation) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SourceChainDelegation.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SourceChainDelegation) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SourceChainDelegation.Merge(m, src)
}
func (m *SourceChainDelegation) XXX_Size() int {
	return m.Size()
}
func (m *SourceChainDelegation) XXX_DiscardUnknown() {
	xxx_messageInfo_SourceChainDelegation.DiscardUnknown(m)
}

var xxx_messageInfo_SourceChainDelegation proto.InternalMessageInfo

func init() {
	proto.RegisterType((*DelegationStrategy)(nil), "celinlim.interstaking.DelegationStrategy")
	proto.RegisterType((*SourceChainMetadata)(nil), "celinlim.interstaking.SourceChainMetadata")
	proto.RegisterType((*SourceChainDelegation)(nil), "celinlim.interstaking.SourceChainDelegation")
}

func init() {
	proto.RegisterFile("celinium/interstaking/source_chain.proto", fileDescriptor_fe65ea8bc8bbff20)
}

var fileDescriptor_fe65ea8bc8bbff20 = []byte{
	// 487 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x52, 0xc1, 0x6e, 0xd3, 0x40,
	0x14, 0xb4, 0x69, 0x29, 0x74, 0x23, 0x20, 0x5d, 0x12, 0xc9, 0xe4, 0xe0, 0x44, 0x51, 0x85, 0x0c,
	0x52, 0x63, 0xb5, 0x70, 0x40, 0xdc, 0x12, 0x17, 0x24, 0x1f, 0xb8, 0x38, 0x3d, 0x21, 0xa4, 0x68,
	0xbd, 0x7e, 0xb8, 0x2b, 0x9c, 0xdd, 0x68, 0x77, 0x5b, 0x51, 0xf1, 0x01, 0x70, 0xe4, 0x13, 0xfa,
	0x11, 0x7c, 0x44, 0x8f, 0x15, 0x27, 0x4e, 0x08, 0x25, 0x17, 0x3e, 0x03, 0x79, 0x37, 0x4e, 0xac,
	0x36, 0xdc, 0xfc, 0xe6, 0xcd, 0x78, 0x46, 0xfb, 0x06, 0x05, 0x14, 0x0a, 0xc6, 0xd9, 0xd9, 0x34,
	0x64, 0x5c, 0x83, 0x54, 0x9a, 0x7c, 0x62, 0x3c, 0x0f, 0x95, 0x38, 0x93, 0x14, 0x26, 0xf4, 0x94,
	0x30, 0x3e, 0x98, 0x49, 0xa1, 0x05, 0x6e, 0x1b, 0x66, 0xc1, 0xa6, 0x83, 0x3a, 0xb3, 0xd3, 0xca,
	0x45, 0x2e, 0x0c, 0x23, 0x2c, 0xbf, 0x2c, 0xb9, 0xf3, 0x84, 0x0a, 0x35, 0x15, 0x6a, 0x62, 0x17,
	0x76, 0x58, 0xae, 0x7c, 0x3b, 0x85, 0x29, 0x51, 0x10, 0x9e, 0x1f, 0xa6, 0xa0, 0xc9, 0x61, 0x48,
	0x45, 0xe5, 0xd3, 0xd9, 0xdf, 0x9c, 0x28, 0x83, 0x02, 0x72, 0xa2, 0xc1, 0xb2, 0xfa, 0x5f, 0x10,
	0x3e, 0xb6, 0x08, 0x13, 0x7c, 0xac, 0x25, 0xd1, 0x90, 0x5f, 0x60, 0x1f, 0xa1, 0x19, 0x48, 0x0a,
	0x5c, 0x93, 0x1c, 0x3c, 0xb7, 0xe7, 0x06, 0x0f, 0x92, 0x1a, 0x82, 0xdf, 0xa0, 0xbd, 0x73, 0x52,
	0xb0, 0x8c, 0x68, 0x21, 0x27, 0x24, 0xcb, 0x24, 0x28, 0xe5, 0xdd, 0xe9, 0xb9, 0xc1, 0xee, 0xc8,
	0xfb, 0xf9, 0xe3, 0xa0, 0xb5, 0x0c, 0x3a, 0xb4, 0x9b, 0xb1, 0x96, 0x8c, 0xe7, 0x49, 0x73, 0x25,
	0x59, 0xe2, 0xfd, 0xaf, 0x5b, 0xe8, 0xf1, 0xd8, 0xbc, 0x50, 0x54, 0x3e, 0xd0, 0x3b, 0xd0, 0x24,
	0x23, 0x9a, 0xe0, 0x1e, 0x6a, 0xb0, 0x94, 0x46, 0x05, 0x03, 0xae, 0xe3, 0xcc, 0xf8, 0xef, 0x26,
	0x75, 0x08, 0x07, 0xe8, 0x51, 0x39, 0x0a, 0xce, 0x81, 0x96, 0xc9, 0xe3, 0xcc, 0xda, 0x27, 0x37,
	0x61, 0x7c, 0x84, 0x5a, 0x2c, 0xa5, 0x27, 0x92, 0x70, 0xf5, 0x11, 0x64, 0x74, 0x4a, 0x38, 0x87,
	0x22, 0xce, 0xbc, 0x2d, 0x43, 0xdf, 0xb8, 0xc3, 0x4f, 0xd1, 0xc3, 0x38, 0x1a, 0x46, 0x82, 0x6b,
	0x29, 0x8a, 0x32, 0xac, 0xb7, 0x6d, 0xd8, 0x37, 0x50, 0xfc, 0x1c, 0x35, 0xd5, 0x3a, 0xfe, 0x31,
	0x70, 0x31, 0xf5, 0xee, 0x1a, 0xe6, 0x2d, 0x1c, 0xbf, 0x44, 0xed, 0x1a, 0x76, 0x22, 0x09, 0x05,
	0x2b, 0xd8, 0x31, 0x82, 0xcd, 0x4b, 0xfc, 0x01, 0xed, 0x55, 0x07, 0x9b, 0xa8, 0xe5, 0x75, 0xbc,
	0x7b, 0xbd, 0xad, 0xa0, 0x71, 0xf4, 0x6c, 0xb0, 0xb1, 0x48, 0x83, 0xdb, 0xe7, 0x1c, 0x6d, 0x5f,
	0xfd, 0xee, 0x3a, 0x49, 0xb3, 0xfa, 0x53, 0x85, 0xbf, 0xbe, 0xff, 0xed, 0xb2, 0xeb, 0xfc, 0xbd,
	0xec, 0x3a, 0x7d, 0x86, 0xda, 0xe3, 0x7a, 0xe2, 0xea, 0x17, 0xf8, 0x2d, 0x6a, 0x64, 0xab, 0x49,
	0x79, 0xae, 0xb1, 0xde, 0xff, 0x8f, 0x75, 0x1c, 0x0d, 0xd7, 0xd2, 0xa4, 0x2e, 0x5c, 0x5b, 0x8d,
	0x5e, 0x5d, 0xcd, 0x7d, 0xf7, 0x7a, 0xee, 0xbb, 0x7f, 0xe6, 0xbe, 0xfb, 0x7d, 0xe1, 0x3b, 0xd7,
	0x0b, 0xdf, 0xf9, 0xb5, 0xf0, 0x9d, 0xf7, 0xfe, 0xaa, 0xb1, 0x9f, 0x6d, 0x67, 0x0f, 0xaa, 0xd2,
	0xea, 0x8b, 0x19, 0xa8, 0x74, 0xc7, 0x54, 0xf6, 0xc5, 0xbf, 0x00, 0x00, 0x00, 0xff, 0xff, 0x45,
	0x1a, 0x5a, 0xf0, 0x6c, 0x03, 0x00, 0x00,
}

func (m *DelegationStrategy) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DelegationStrategy) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DelegationStrategy) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ValidatorAddress) > 0 {
		i -= len(m.ValidatorAddress)
		copy(dAtA[i:], m.ValidatorAddress)
		i = encodeVarintSourceChain(dAtA, i, uint64(len(m.ValidatorAddress)))
		i--
		dAtA[i] = 0x12
	}
	if m.Percentage != 0 {
		i = encodeVarintSourceChain(dAtA, i, uint64(m.Percentage))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *SourceChainMetadata) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SourceChainMetadata) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SourceChainMetadata) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.DelegateStrategy) > 0 {
		for iNdEx := len(m.DelegateStrategy) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.DelegateStrategy[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintSourceChain(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x3a
		}
	}
	if len(m.SourceChainTraceDenom) > 0 {
		i -= len(m.SourceChainTraceDenom)
		copy(dAtA[i:], m.SourceChainTraceDenom)
		i = encodeVarintSourceChain(dAtA, i, uint64(len(m.SourceChainTraceDenom)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.SourceChainDenom) > 0 {
		i -= len(m.SourceChainDenom)
		copy(dAtA[i:], m.SourceChainDenom)
		i = encodeVarintSourceChain(dAtA, i, uint64(len(m.SourceChainDenom)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.ICAControlAddr) > 0 {
		i -= len(m.ICAControlAddr)
		copy(dAtA[i:], m.ICAControlAddr)
		i = encodeVarintSourceChain(dAtA, i, uint64(len(m.ICAControlAddr)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.IbcTransferChannelId) > 0 {
		i -= len(m.IbcTransferChannelId)
		copy(dAtA[i:], m.IbcTransferChannelId)
		i = encodeVarintSourceChain(dAtA, i, uint64(len(m.IbcTransferChannelId)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.IbcConnectionId) > 0 {
		i -= len(m.IbcConnectionId)
		copy(dAtA[i:], m.IbcConnectionId)
		i = encodeVarintSourceChain(dAtA, i, uint64(len(m.IbcConnectionId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.IbcClientId) > 0 {
		i -= len(m.IbcClientId)
		copy(dAtA[i:], m.IbcClientId)
		i = encodeVarintSourceChain(dAtA, i, uint64(len(m.IbcClientId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SourceChainDelegation) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SourceChainDelegation) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SourceChainDelegation) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Delegations) > 0 {
		for iNdEx := len(m.Delegations) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Delegations[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintSourceChain(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintSourceChain(dAtA []byte, offset int, v uint64) int {
	offset -= sovSourceChain(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *DelegationStrategy) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Percentage != 0 {
		n += 1 + sovSourceChain(uint64(m.Percentage))
	}
	l = len(m.ValidatorAddress)
	if l > 0 {
		n += 1 + l + sovSourceChain(uint64(l))
	}
	return n
}

func (m *SourceChainMetadata) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.IbcClientId)
	if l > 0 {
		n += 1 + l + sovSourceChain(uint64(l))
	}
	l = len(m.IbcConnectionId)
	if l > 0 {
		n += 1 + l + sovSourceChain(uint64(l))
	}
	l = len(m.IbcTransferChannelId)
	if l > 0 {
		n += 1 + l + sovSourceChain(uint64(l))
	}
	l = len(m.ICAControlAddr)
	if l > 0 {
		n += 1 + l + sovSourceChain(uint64(l))
	}
	l = len(m.SourceChainDenom)
	if l > 0 {
		n += 1 + l + sovSourceChain(uint64(l))
	}
	l = len(m.SourceChainTraceDenom)
	if l > 0 {
		n += 1 + l + sovSourceChain(uint64(l))
	}
	if len(m.DelegateStrategy) > 0 {
		for _, e := range m.DelegateStrategy {
			l = e.Size()
			n += 1 + l + sovSourceChain(uint64(l))
		}
	}
	return n
}

func (m *SourceChainDelegation) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Delegations) > 0 {
		for _, e := range m.Delegations {
			l = e.Size()
			n += 1 + l + sovSourceChain(uint64(l))
		}
	}
	return n
}

func sovSourceChain(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozSourceChain(x uint64) (n int) {
	return sovSourceChain(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *DelegationStrategy) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSourceChain
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DelegationStrategy: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DelegationStrategy: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Percentage", wireType)
			}
			m.Percentage = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSourceChain
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Percentage |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ValidatorAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSourceChain
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSourceChain
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSourceChain
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ValidatorAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSourceChain(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthSourceChain
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SourceChainMetadata) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSourceChain
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SourceChainMetadata: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SourceChainMetadata: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IbcClientId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSourceChain
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSourceChain
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSourceChain
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IbcClientId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IbcConnectionId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSourceChain
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSourceChain
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSourceChain
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IbcConnectionId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IbcTransferChannelId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSourceChain
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSourceChain
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSourceChain
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IbcTransferChannelId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ICAControlAddr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSourceChain
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSourceChain
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSourceChain
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ICAControlAddr = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SourceChainDenom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSourceChain
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSourceChain
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSourceChain
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SourceChainDenom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SourceChainTraceDenom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSourceChain
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSourceChain
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSourceChain
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SourceChainTraceDenom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DelegateStrategy", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSourceChain
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSourceChain
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSourceChain
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DelegateStrategy = append(m.DelegateStrategy, DelegationStrategy{})
			if err := m.DelegateStrategy[len(m.DelegateStrategy)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSourceChain(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthSourceChain
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SourceChainDelegation) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSourceChain
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SourceChainDelegation: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SourceChainDelegation: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Delegations", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSourceChain
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSourceChain
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSourceChain
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Delegations = append(m.Delegations, &ICADelegation{})
			if err := m.Delegations[len(m.Delegations)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSourceChain(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthSourceChain
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipSourceChain(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowSourceChain
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSourceChain
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSourceChain
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthSourceChain
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupSourceChain
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthSourceChain
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthSourceChain        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowSourceChain          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupSourceChain = fmt.Errorf("proto: unexpected end of group")
)
