// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: celinium/liquidstake/v1/query.proto

package types

import (
	context "context"
	fmt "fmt"
	_ "github.com/cosmos/cosmos-proto"
	_ "github.com/cosmos/gogoproto/gogoproto"
	grpc1 "github.com/gogo/protobuf/grpc"
	proto "github.com/gogo/protobuf/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type QuerySourceChainRequest struct {
	ChainID string `protobuf:"bytes,1,opt,name=ChainID,proto3" json:"ChainID,omitempty"`
}

func (m *QuerySourceChainRequest) Reset()         { *m = QuerySourceChainRequest{} }
func (m *QuerySourceChainRequest) String() string { return proto.CompactTextString(m) }
func (*QuerySourceChainRequest) ProtoMessage()    {}
func (*QuerySourceChainRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_4a1fda13ab20bfc7, []int{0}
}
func (m *QuerySourceChainRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QuerySourceChainRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QuerySourceChainRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QuerySourceChainRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QuerySourceChainRequest.Merge(m, src)
}
func (m *QuerySourceChainRequest) XXX_Size() int {
	return m.Size()
}
func (m *QuerySourceChainRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QuerySourceChainRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QuerySourceChainRequest proto.InternalMessageInfo

func (m *QuerySourceChainRequest) GetChainID() string {
	if m != nil {
		return m.ChainID
	}
	return ""
}

type QuerySourceChainResponse struct {
	SourceChain SourceChain `protobuf:"bytes,1,opt,name=sourceChain,proto3" json:"sourceChain"`
}

func (m *QuerySourceChainResponse) Reset()         { *m = QuerySourceChainResponse{} }
func (m *QuerySourceChainResponse) String() string { return proto.CompactTextString(m) }
func (*QuerySourceChainResponse) ProtoMessage()    {}
func (*QuerySourceChainResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_4a1fda13ab20bfc7, []int{1}
}
func (m *QuerySourceChainResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QuerySourceChainResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QuerySourceChainResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QuerySourceChainResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QuerySourceChainResponse.Merge(m, src)
}
func (m *QuerySourceChainResponse) XXX_Size() int {
	return m.Size()
}
func (m *QuerySourceChainResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QuerySourceChainResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QuerySourceChainResponse proto.InternalMessageInfo

func (m *QuerySourceChainResponse) GetSourceChain() SourceChain {
	if m != nil {
		return m.SourceChain
	}
	return SourceChain{}
}

type QueryProxyDelegationRequest struct {
	Epoch   uint64 `protobuf:"varint,1,opt,name=epoch,proto3" json:"epoch,omitempty"`
	ChainID string `protobuf:"bytes,2,opt,name=chainID,proto3" json:"chainID,omitempty"`
}

func (m *QueryProxyDelegationRequest) Reset()         { *m = QueryProxyDelegationRequest{} }
func (m *QueryProxyDelegationRequest) String() string { return proto.CompactTextString(m) }
func (*QueryProxyDelegationRequest) ProtoMessage()    {}
func (*QueryProxyDelegationRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_4a1fda13ab20bfc7, []int{2}
}
func (m *QueryProxyDelegationRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryProxyDelegationRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryProxyDelegationRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryProxyDelegationRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryProxyDelegationRequest.Merge(m, src)
}
func (m *QueryProxyDelegationRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryProxyDelegationRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryProxyDelegationRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryProxyDelegationRequest proto.InternalMessageInfo

func (m *QueryProxyDelegationRequest) GetEpoch() uint64 {
	if m != nil {
		return m.Epoch
	}
	return 0
}

func (m *QueryProxyDelegationRequest) GetChainID() string {
	if m != nil {
		return m.ChainID
	}
	return ""
}

type QueryProxyDelegationResponse struct {
	Record ProxyDelegation `protobuf:"bytes,1,opt,name=record,proto3" json:"record"`
}

func (m *QueryProxyDelegationResponse) Reset()         { *m = QueryProxyDelegationResponse{} }
func (m *QueryProxyDelegationResponse) String() string { return proto.CompactTextString(m) }
func (*QueryProxyDelegationResponse) ProtoMessage()    {}
func (*QueryProxyDelegationResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_4a1fda13ab20bfc7, []int{3}
}
func (m *QueryProxyDelegationResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryProxyDelegationResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryProxyDelegationResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryProxyDelegationResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryProxyDelegationResponse.Merge(m, src)
}
func (m *QueryProxyDelegationResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryProxyDelegationResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryProxyDelegationResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryProxyDelegationResponse proto.InternalMessageInfo

func (m *QueryProxyDelegationResponse) GetRecord() ProxyDelegation {
	if m != nil {
		return m.Record
	}
	return ProxyDelegation{}
}

type QueryEpochProxyUnbondingRequest struct {
	Epoch   uint64 `protobuf:"varint,1,opt,name=epoch,proto3" json:"epoch,omitempty"`
	ChainID string `protobuf:"bytes,2,opt,name=chainID,proto3" json:"chainID,omitempty"`
}

func (m *QueryEpochProxyUnbondingRequest) Reset()         { *m = QueryEpochProxyUnbondingRequest{} }
func (m *QueryEpochProxyUnbondingRequest) String() string { return proto.CompactTextString(m) }
func (*QueryEpochProxyUnbondingRequest) ProtoMessage()    {}
func (*QueryEpochProxyUnbondingRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_4a1fda13ab20bfc7, []int{4}
}
func (m *QueryEpochProxyUnbondingRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryEpochProxyUnbondingRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryEpochProxyUnbondingRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryEpochProxyUnbondingRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryEpochProxyUnbondingRequest.Merge(m, src)
}
func (m *QueryEpochProxyUnbondingRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryEpochProxyUnbondingRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryEpochProxyUnbondingRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryEpochProxyUnbondingRequest proto.InternalMessageInfo

func (m *QueryEpochProxyUnbondingRequest) GetEpoch() uint64 {
	if m != nil {
		return m.Epoch
	}
	return 0
}

func (m *QueryEpochProxyUnbondingRequest) GetChainID() string {
	if m != nil {
		return m.ChainID
	}
	return ""
}

type QueryEpochProxyUnbondingResponse struct {
	ChainUnbonding ProxyUnbonding `protobuf:"bytes,1,opt,name=chainUnbonding,proto3" json:"chainUnbonding"`
}

func (m *QueryEpochProxyUnbondingResponse) Reset()         { *m = QueryEpochProxyUnbondingResponse{} }
func (m *QueryEpochProxyUnbondingResponse) String() string { return proto.CompactTextString(m) }
func (*QueryEpochProxyUnbondingResponse) ProtoMessage()    {}
func (*QueryEpochProxyUnbondingResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_4a1fda13ab20bfc7, []int{5}
}
func (m *QueryEpochProxyUnbondingResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryEpochProxyUnbondingResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryEpochProxyUnbondingResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryEpochProxyUnbondingResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryEpochProxyUnbondingResponse.Merge(m, src)
}
func (m *QueryEpochProxyUnbondingResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryEpochProxyUnbondingResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryEpochProxyUnbondingResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryEpochProxyUnbondingResponse proto.InternalMessageInfo

func (m *QueryEpochProxyUnbondingResponse) GetChainUnbonding() ProxyUnbonding {
	if m != nil {
		return m.ChainUnbonding
	}
	return ProxyUnbonding{}
}

type QueryUserUnbondingRequest struct {
	ChainID string `protobuf:"bytes,1,opt,name=chainID,proto3" json:"chainID,omitempty"`
	User    string `protobuf:"bytes,2,opt,name=user,proto3" json:"user,omitempty"`
}

func (m *QueryUserUnbondingRequest) Reset()         { *m = QueryUserUnbondingRequest{} }
func (m *QueryUserUnbondingRequest) String() string { return proto.CompactTextString(m) }
func (*QueryUserUnbondingRequest) ProtoMessage()    {}
func (*QueryUserUnbondingRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_4a1fda13ab20bfc7, []int{6}
}
func (m *QueryUserUnbondingRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryUserUnbondingRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryUserUnbondingRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryUserUnbondingRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryUserUnbondingRequest.Merge(m, src)
}
func (m *QueryUserUnbondingRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryUserUnbondingRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryUserUnbondingRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryUserUnbondingRequest proto.InternalMessageInfo

func (m *QueryUserUnbondingRequest) GetChainID() string {
	if m != nil {
		return m.ChainID
	}
	return ""
}

func (m *QueryUserUnbondingRequest) GetUser() string {
	if m != nil {
		return m.User
	}
	return ""
}

type QueryUserUnbondingResponse struct {
	UserUnbondings []UserUnbonding `protobuf:"bytes,1,rep,name=userUnbondings,proto3" json:"userUnbondings"`
}

func (m *QueryUserUnbondingResponse) Reset()         { *m = QueryUserUnbondingResponse{} }
func (m *QueryUserUnbondingResponse) String() string { return proto.CompactTextString(m) }
func (*QueryUserUnbondingResponse) ProtoMessage()    {}
func (*QueryUserUnbondingResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_4a1fda13ab20bfc7, []int{7}
}
func (m *QueryUserUnbondingResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryUserUnbondingResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryUserUnbondingResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryUserUnbondingResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryUserUnbondingResponse.Merge(m, src)
}
func (m *QueryUserUnbondingResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryUserUnbondingResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryUserUnbondingResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryUserUnbondingResponse proto.InternalMessageInfo

func (m *QueryUserUnbondingResponse) GetUserUnbondings() []UserUnbonding {
	if m != nil {
		return m.UserUnbondings
	}
	return nil
}

func init() {
	proto.RegisterType((*QuerySourceChainRequest)(nil), "celinium.liquidstake.v1.QuerySourceChainRequest")
	proto.RegisterType((*QuerySourceChainResponse)(nil), "celinium.liquidstake.v1.QuerySourceChainResponse")
	proto.RegisterType((*QueryProxyDelegationRequest)(nil), "celinium.liquidstake.v1.QueryProxyDelegationRequest")
	proto.RegisterType((*QueryProxyDelegationResponse)(nil), "celinium.liquidstake.v1.QueryProxyDelegationResponse")
	proto.RegisterType((*QueryEpochProxyUnbondingRequest)(nil), "celinium.liquidstake.v1.QueryEpochProxyUnbondingRequest")
	proto.RegisterType((*QueryEpochProxyUnbondingResponse)(nil), "celinium.liquidstake.v1.QueryEpochProxyUnbondingResponse")
	proto.RegisterType((*QueryUserUnbondingRequest)(nil), "celinium.liquidstake.v1.QueryUserUnbondingRequest")
	proto.RegisterType((*QueryUserUnbondingResponse)(nil), "celinium.liquidstake.v1.QueryUserUnbondingResponse")
}

func init() {
	proto.RegisterFile("celinium/liquidstake/v1/query.proto", fileDescriptor_4a1fda13ab20bfc7)
}

var fileDescriptor_4a1fda13ab20bfc7 = []byte{
	// 589 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x94, 0xcf, 0x6e, 0xd3, 0x4e,
	0x10, 0xc7, 0xb3, 0xfd, 0x25, 0xfd, 0x89, 0x89, 0x28, 0xd2, 0x52, 0xa9, 0xa9, 0x89, 0xdc, 0xc8,
	0xfc, 0x49, 0x0a, 0xc2, 0x6e, 0x12, 0xa8, 0xe0, 0x5a, 0x0a, 0x52, 0x25, 0x90, 0x68, 0x20, 0x17,
	0x2e, 0x51, 0xea, 0x2c, 0x8e, 0x45, 0xea, 0x75, 0xbc, 0x76, 0xd5, 0x5c, 0x79, 0x02, 0x24, 0x9e,
	0x80, 0x23, 0x47, 0x5e, 0x81, 0x53, 0x8f, 0x91, 0xb8, 0x70, 0x42, 0x28, 0xe1, 0x41, 0x90, 0xd7,
	0xeb, 0xc4, 0x4e, 0xbd, 0x11, 0xe9, 0xcd, 0x93, 0x99, 0xef, 0x77, 0x3e, 0xb3, 0x9a, 0x09, 0xdc,
	0x36, 0xc9, 0xc0, 0x76, 0xec, 0xe0, 0xd4, 0x18, 0xd8, 0xc3, 0xc0, 0xee, 0x31, 0xbf, 0xfb, 0x81,
	0x18, 0x67, 0x75, 0x63, 0x18, 0x10, 0x6f, 0xa4, 0xbb, 0x1e, 0xf5, 0x29, 0xde, 0x8a, 0x8b, 0xf4,
	0x44, 0x91, 0x7e, 0x56, 0x57, 0x36, 0x2d, 0x6a, 0x51, 0x5e, 0x63, 0x84, 0x5f, 0x51, 0xb9, 0xb2,
	0x6d, 0x52, 0x76, 0x4a, 0x59, 0x27, 0x4a, 0x44, 0x81, 0x48, 0x95, 0x2d, 0x4a, 0xad, 0x01, 0x31,
	0xba, 0xae, 0x6d, 0x74, 0x1d, 0x87, 0xfa, 0x5d, 0xdf, 0xa6, 0x4e, 0x9c, 0xbd, 0x2f, 0x83, 0x61,
	0x34, 0xf0, 0x4c, 0xd2, 0x31, 0xfb, 0x5d, 0xdb, 0x11, 0xb5, 0x52, 0xf0, 0x08, 0x8e, 0x17, 0x69,
	0x4d, 0xd8, 0x3a, 0x0e, 0xe7, 0x78, 0xc3, 0xf5, 0xcf, 0x42, 0x79, 0x8b, 0x0c, 0x03, 0xc2, 0x7c,
	0x5c, 0x82, 0xff, 0x79, 0x7c, 0x74, 0x58, 0x42, 0x15, 0x54, 0xbb, 0xd6, 0x8a, 0x43, 0xad, 0x0f,
	0xa5, 0xcb, 0x22, 0xe6, 0x52, 0x87, 0x11, 0xfc, 0x12, 0x8a, 0x6c, 0xfe, 0x33, 0x57, 0x16, 0x1b,
	0x77, 0x74, 0xc9, 0xfb, 0xe8, 0x09, 0x8b, 0x83, 0xfc, 0xc5, 0xaf, 0x9d, 0x5c, 0x2b, 0x29, 0xd7,
	0x5e, 0xc1, 0x2d, 0xde, 0xe9, 0xb5, 0x47, 0xcf, 0x47, 0x87, 0x64, 0x40, 0x2c, 0xfe, 0x1c, 0x31,
	0xe2, 0x26, 0x14, 0x88, 0x4b, 0xcd, 0x3e, 0x6f, 0x93, 0x6f, 0x45, 0x41, 0x08, 0x6e, 0x0a, 0xf0,
	0xb5, 0x08, 0x5c, 0x84, 0xda, 0x7b, 0x28, 0x67, 0xdb, 0x09, 0xf8, 0x17, 0xb0, 0xee, 0x11, 0x93,
	0x7a, 0x3d, 0xc1, 0x5d, 0x93, 0x72, 0x2f, 0x38, 0x08, 0x76, 0xa1, 0xd6, 0x8e, 0x61, 0x87, 0xf7,
	0x79, 0x1e, 0xf2, 0xf0, 0xd2, 0xb6, 0x73, 0x42, 0x9d, 0x9e, 0xed, 0x58, 0x57, 0x45, 0x1f, 0x41,
	0x45, 0x6e, 0x29, 0xf0, 0xdb, 0xb0, 0xc1, 0xcb, 0x67, 0x19, 0x31, 0x46, 0x75, 0xf9, 0x18, 0xb3,
	0x72, 0x31, 0xc5, 0x82, 0x89, 0x76, 0x04, 0xdb, 0xbc, 0x75, 0x9b, 0x11, 0xef, 0xd2, 0x1c, 0x09,
	0x62, 0x94, 0x22, 0xc6, 0x18, 0xf2, 0x01, 0x23, 0x9e, 0x18, 0x84, 0x7f, 0x6b, 0x1e, 0x28, 0x59,
	0x56, 0x82, 0xff, 0x2d, 0x6c, 0x04, 0xc9, 0x04, 0x2b, 0xa1, 0xca, 0x7f, 0xb5, 0x62, 0xe3, 0x9e,
	0x94, 0x3f, 0xe5, 0x13, 0xe3, 0xa7, 0x3d, 0x1a, 0xe3, 0x02, 0x14, 0x78, 0x53, 0xfc, 0x05, 0x41,
	0x31, 0xb1, 0x70, 0x78, 0x4f, 0xea, 0x2b, 0xb9, 0x09, 0xa5, 0xbe, 0x82, 0x22, 0x1a, 0x4a, 0x7b,
	0xf8, 0xf1, 0xc7, 0x9f, 0xcf, 0x6b, 0x55, 0x7c, 0xd7, 0xf8, 0x97, 0xdb, 0xc5, 0xdf, 0x10, 0xdc,
	0x58, 0x58, 0x2e, 0xfc, 0x68, 0x79, 0xd7, 0xec, 0xe3, 0x50, 0x1e, 0xaf, 0xa8, 0x12, 0xbc, 0x75,
	0xce, 0xfb, 0x00, 0xef, 0x4a, 0x79, 0xdd, 0x50, 0xd9, 0xe9, 0xcd, 0xf9, 0xbe, 0x23, 0xb8, 0x99,
	0xb1, 0x97, 0xf8, 0xc9, 0x72, 0x02, 0xf9, 0x75, 0x28, 0x4f, 0xaf, 0xa0, 0x14, 0xfc, 0xfb, 0x9c,
	0x7f, 0x0f, 0xeb, 0x52, 0x7e, 0x7e, 0x6a, 0x9d, 0x68, 0x8a, 0x60, 0x06, 0xfb, 0x15, 0xc1, 0xf5,
	0xd4, 0x3a, 0xe1, 0xc6, 0x72, 0x88, 0xac, 0x73, 0x50, 0x9a, 0x2b, 0x69, 0x04, 0xb2, 0xc1, 0x91,
	0x77, 0x71, 0x55, 0x8a, 0x1c, 0xae, 0xf4, 0x9c, 0xf5, 0x60, 0xff, 0x62, 0xa2, 0xa2, 0xf1, 0x44,
	0x45, 0xbf, 0x27, 0x2a, 0xfa, 0x34, 0x55, 0x73, 0xe3, 0xa9, 0x9a, 0xfb, 0x39, 0x55, 0x73, 0xef,
	0xca, 0x33, 0x87, 0xf3, 0x94, 0x87, 0x3f, 0x72, 0x09, 0x3b, 0x59, 0xe7, 0x7f, 0xfa, 0xcd, 0xbf,
	0x01, 0x00, 0x00, 0xff, 0xff, 0xa4, 0x05, 0x56, 0xbb, 0xd4, 0x06, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type QueryClient interface {
	SourceChain(ctx context.Context, in *QuerySourceChainRequest, opts ...grpc.CallOption) (*QuerySourceChainResponse, error)
	ProxyDelegation(ctx context.Context, in *QueryProxyDelegationRequest, opts ...grpc.CallOption) (*QueryProxyDelegationResponse, error)
	EpochProxyUnbonding(ctx context.Context, in *QueryEpochProxyUnbondingRequest, opts ...grpc.CallOption) (*QueryEpochProxyUnbondingResponse, error)
	UserUnbonding(ctx context.Context, in *QueryUserUnbondingRequest, opts ...grpc.CallOption) (*QueryUserUnbondingResponse, error)
}

type queryClient struct {
	cc grpc1.ClientConn
}

func NewQueryClient(cc grpc1.ClientConn) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) SourceChain(ctx context.Context, in *QuerySourceChainRequest, opts ...grpc.CallOption) (*QuerySourceChainResponse, error) {
	out := new(QuerySourceChainResponse)
	err := c.cc.Invoke(ctx, "/celinium.liquidstake.v1.Query/SourceChain", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) ProxyDelegation(ctx context.Context, in *QueryProxyDelegationRequest, opts ...grpc.CallOption) (*QueryProxyDelegationResponse, error) {
	out := new(QueryProxyDelegationResponse)
	err := c.cc.Invoke(ctx, "/celinium.liquidstake.v1.Query/ProxyDelegation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) EpochProxyUnbonding(ctx context.Context, in *QueryEpochProxyUnbondingRequest, opts ...grpc.CallOption) (*QueryEpochProxyUnbondingResponse, error) {
	out := new(QueryEpochProxyUnbondingResponse)
	err := c.cc.Invoke(ctx, "/celinium.liquidstake.v1.Query/EpochProxyUnbonding", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) UserUnbonding(ctx context.Context, in *QueryUserUnbondingRequest, opts ...grpc.CallOption) (*QueryUserUnbondingResponse, error) {
	out := new(QueryUserUnbondingResponse)
	err := c.cc.Invoke(ctx, "/celinium.liquidstake.v1.Query/UserUnbonding", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
type QueryServer interface {
	SourceChain(context.Context, *QuerySourceChainRequest) (*QuerySourceChainResponse, error)
	ProxyDelegation(context.Context, *QueryProxyDelegationRequest) (*QueryProxyDelegationResponse, error)
	EpochProxyUnbonding(context.Context, *QueryEpochProxyUnbondingRequest) (*QueryEpochProxyUnbondingResponse, error)
	UserUnbonding(context.Context, *QueryUserUnbondingRequest) (*QueryUserUnbondingResponse, error)
}

// UnimplementedQueryServer can be embedded to have forward compatible implementations.
type UnimplementedQueryServer struct {
}

func (*UnimplementedQueryServer) SourceChain(ctx context.Context, req *QuerySourceChainRequest) (*QuerySourceChainResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SourceChain not implemented")
}
func (*UnimplementedQueryServer) ProxyDelegation(ctx context.Context, req *QueryProxyDelegationRequest) (*QueryProxyDelegationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProxyDelegation not implemented")
}
func (*UnimplementedQueryServer) EpochProxyUnbonding(ctx context.Context, req *QueryEpochProxyUnbondingRequest) (*QueryEpochProxyUnbondingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EpochProxyUnbonding not implemented")
}
func (*UnimplementedQueryServer) UserUnbonding(ctx context.Context, req *QueryUserUnbondingRequest) (*QueryUserUnbondingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserUnbonding not implemented")
}

func RegisterQueryServer(s grpc1.Server, srv QueryServer) {
	s.RegisterService(&_Query_serviceDesc, srv)
}

func _Query_SourceChain_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QuerySourceChainRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).SourceChain(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/celinium.liquidstake.v1.Query/SourceChain",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).SourceChain(ctx, req.(*QuerySourceChainRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_ProxyDelegation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryProxyDelegationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).ProxyDelegation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/celinium.liquidstake.v1.Query/ProxyDelegation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).ProxyDelegation(ctx, req.(*QueryProxyDelegationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_EpochProxyUnbonding_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryEpochProxyUnbondingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).EpochProxyUnbonding(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/celinium.liquidstake.v1.Query/EpochProxyUnbonding",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).EpochProxyUnbonding(ctx, req.(*QueryEpochProxyUnbondingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_UserUnbonding_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryUserUnbondingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).UserUnbonding(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/celinium.liquidstake.v1.Query/UserUnbonding",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).UserUnbonding(ctx, req.(*QueryUserUnbondingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Query_serviceDesc = grpc.ServiceDesc{
	ServiceName: "celinium.liquidstake.v1.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SourceChain",
			Handler:    _Query_SourceChain_Handler,
		},
		{
			MethodName: "ProxyDelegation",
			Handler:    _Query_ProxyDelegation_Handler,
		},
		{
			MethodName: "EpochProxyUnbonding",
			Handler:    _Query_EpochProxyUnbonding_Handler,
		},
		{
			MethodName: "UserUnbonding",
			Handler:    _Query_UserUnbonding_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "celinium/liquidstake/v1/query.proto",
}

func (m *QuerySourceChainRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QuerySourceChainRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QuerySourceChainRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ChainID) > 0 {
		i -= len(m.ChainID)
		copy(dAtA[i:], m.ChainID)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.ChainID)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QuerySourceChainResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QuerySourceChainResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QuerySourceChainResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.SourceChain.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryProxyDelegationRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryProxyDelegationRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryProxyDelegationRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ChainID) > 0 {
		i -= len(m.ChainID)
		copy(dAtA[i:], m.ChainID)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.ChainID)))
		i--
		dAtA[i] = 0x12
	}
	if m.Epoch != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Epoch))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryProxyDelegationResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryProxyDelegationResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryProxyDelegationResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Record.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryEpochProxyUnbondingRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryEpochProxyUnbondingRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryEpochProxyUnbondingRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ChainID) > 0 {
		i -= len(m.ChainID)
		copy(dAtA[i:], m.ChainID)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.ChainID)))
		i--
		dAtA[i] = 0x12
	}
	if m.Epoch != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Epoch))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryEpochProxyUnbondingResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryEpochProxyUnbondingResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryEpochProxyUnbondingResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.ChainUnbonding.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryUserUnbondingRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryUserUnbondingRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryUserUnbondingRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.User) > 0 {
		i -= len(m.User)
		copy(dAtA[i:], m.User)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.User)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.ChainID) > 0 {
		i -= len(m.ChainID)
		copy(dAtA[i:], m.ChainID)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.ChainID)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryUserUnbondingResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryUserUnbondingResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryUserUnbondingResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.UserUnbondings) > 0 {
		for iNdEx := len(m.UserUnbondings) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.UserUnbondings[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintQuery(dAtA []byte, offset int, v uint64) int {
	offset -= sovQuery(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *QuerySourceChainRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ChainID)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QuerySourceChainResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.SourceChain.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryProxyDelegationRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Epoch != 0 {
		n += 1 + sovQuery(uint64(m.Epoch))
	}
	l = len(m.ChainID)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryProxyDelegationResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Record.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryEpochProxyUnbondingRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Epoch != 0 {
		n += 1 + sovQuery(uint64(m.Epoch))
	}
	l = len(m.ChainID)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryEpochProxyUnbondingResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.ChainUnbonding.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryUserUnbondingRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ChainID)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.User)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryUserUnbondingResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.UserUnbondings) > 0 {
		for _, e := range m.UserUnbondings {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func sovQuery(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozQuery(x uint64) (n int) {
	return sovQuery(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *QuerySourceChainRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QuerySourceChainRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QuerySourceChainRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChainID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QuerySourceChainResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QuerySourceChainResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QuerySourceChainResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SourceChain", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.SourceChain.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryProxyDelegationRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryProxyDelegationRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryProxyDelegationRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Epoch", wireType)
			}
			m.Epoch = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Epoch |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChainID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryProxyDelegationResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryProxyDelegationResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryProxyDelegationResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Record", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Record.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryEpochProxyUnbondingRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryEpochProxyUnbondingRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryEpochProxyUnbondingRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Epoch", wireType)
			}
			m.Epoch = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Epoch |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChainID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryEpochProxyUnbondingResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryEpochProxyUnbondingResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryEpochProxyUnbondingResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainUnbonding", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ChainUnbonding.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryUserUnbondingRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryUserUnbondingRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryUserUnbondingRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChainID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field User", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.User = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryUserUnbondingResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryUserUnbondingResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryUserUnbondingResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserUnbondings", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UserUnbondings = append(m.UserUnbondings, UserUnbonding{})
			if err := m.UserUnbondings[len(m.UserUnbondings)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipQuery(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthQuery
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupQuery
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthQuery
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthQuery        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowQuery          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupQuery = fmt.Errorf("proto: unexpected end of group")
)
