// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: celinium/liquidstake/v1/query.proto

package types

import (
	context "context"
	fmt "fmt"
	_ "github.com/cosmos/cosmos-proto"
	_ "github.com/cosmos/gogoproto/gogoproto"
	grpc1 "github.com/gogo/protobuf/grpc"
	proto "github.com/gogo/protobuf/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type QuerySourceChainRequest struct {
	ChainID string `protobuf:"bytes,1,opt,name=ChainID,proto3" json:"ChainID,omitempty"`
}

func (m *QuerySourceChainRequest) Reset()         { *m = QuerySourceChainRequest{} }
func (m *QuerySourceChainRequest) String() string { return proto.CompactTextString(m) }
func (*QuerySourceChainRequest) ProtoMessage()    {}
func (*QuerySourceChainRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_4a1fda13ab20bfc7, []int{0}
}
func (m *QuerySourceChainRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QuerySourceChainRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QuerySourceChainRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QuerySourceChainRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QuerySourceChainRequest.Merge(m, src)
}
func (m *QuerySourceChainRequest) XXX_Size() int {
	return m.Size()
}
func (m *QuerySourceChainRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QuerySourceChainRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QuerySourceChainRequest proto.InternalMessageInfo

func (m *QuerySourceChainRequest) GetChainID() string {
	if m != nil {
		return m.ChainID
	}
	return ""
}

type QuerySourceChainResponse struct {
	SourceChain SourceChain `protobuf:"bytes,1,opt,name=sourceChain,proto3" json:"sourceChain"`
}

func (m *QuerySourceChainResponse) Reset()         { *m = QuerySourceChainResponse{} }
func (m *QuerySourceChainResponse) String() string { return proto.CompactTextString(m) }
func (*QuerySourceChainResponse) ProtoMessage()    {}
func (*QuerySourceChainResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_4a1fda13ab20bfc7, []int{1}
}
func (m *QuerySourceChainResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QuerySourceChainResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QuerySourceChainResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QuerySourceChainResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QuerySourceChainResponse.Merge(m, src)
}
func (m *QuerySourceChainResponse) XXX_Size() int {
	return m.Size()
}
func (m *QuerySourceChainResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QuerySourceChainResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QuerySourceChainResponse proto.InternalMessageInfo

func (m *QuerySourceChainResponse) GetSourceChain() SourceChain {
	if m != nil {
		return m.SourceChain
	}
	return SourceChain{}
}

type QueryChainEpochDelegationRecordRequest struct {
	Epoch   uint64 `protobuf:"varint,1,opt,name=epoch,proto3" json:"epoch,omitempty"`
	ChainID string `protobuf:"bytes,2,opt,name=chainID,proto3" json:"chainID,omitempty"`
}

func (m *QueryChainEpochDelegationRecordRequest) Reset() {
	*m = QueryChainEpochDelegationRecordRequest{}
}
func (m *QueryChainEpochDelegationRecordRequest) String() string { return proto.CompactTextString(m) }
func (*QueryChainEpochDelegationRecordRequest) ProtoMessage()    {}
func (*QueryChainEpochDelegationRecordRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_4a1fda13ab20bfc7, []int{2}
}
func (m *QueryChainEpochDelegationRecordRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryChainEpochDelegationRecordRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryChainEpochDelegationRecordRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryChainEpochDelegationRecordRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryChainEpochDelegationRecordRequest.Merge(m, src)
}
func (m *QueryChainEpochDelegationRecordRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryChainEpochDelegationRecordRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryChainEpochDelegationRecordRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryChainEpochDelegationRecordRequest proto.InternalMessageInfo

func (m *QueryChainEpochDelegationRecordRequest) GetEpoch() uint64 {
	if m != nil {
		return m.Epoch
	}
	return 0
}

func (m *QueryChainEpochDelegationRecordRequest) GetChainID() string {
	if m != nil {
		return m.ChainID
	}
	return ""
}

type QueryChainEpochDelegationRecordResponse struct {
	Record DelegationRecord `protobuf:"bytes,1,opt,name=record,proto3" json:"record"`
}

func (m *QueryChainEpochDelegationRecordResponse) Reset() {
	*m = QueryChainEpochDelegationRecordResponse{}
}
func (m *QueryChainEpochDelegationRecordResponse) String() string { return proto.CompactTextString(m) }
func (*QueryChainEpochDelegationRecordResponse) ProtoMessage()    {}
func (*QueryChainEpochDelegationRecordResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_4a1fda13ab20bfc7, []int{3}
}
func (m *QueryChainEpochDelegationRecordResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryChainEpochDelegationRecordResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryChainEpochDelegationRecordResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryChainEpochDelegationRecordResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryChainEpochDelegationRecordResponse.Merge(m, src)
}
func (m *QueryChainEpochDelegationRecordResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryChainEpochDelegationRecordResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryChainEpochDelegationRecordResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryChainEpochDelegationRecordResponse proto.InternalMessageInfo

func (m *QueryChainEpochDelegationRecordResponse) GetRecord() DelegationRecord {
	if m != nil {
		return m.Record
	}
	return DelegationRecord{}
}

type QueryChainEpochUnbondingRequest struct {
	Epoch   uint64 `protobuf:"varint,1,opt,name=epoch,proto3" json:"epoch,omitempty"`
	ChainID string `protobuf:"bytes,2,opt,name=chainID,proto3" json:"chainID,omitempty"`
}

func (m *QueryChainEpochUnbondingRequest) Reset()         { *m = QueryChainEpochUnbondingRequest{} }
func (m *QueryChainEpochUnbondingRequest) String() string { return proto.CompactTextString(m) }
func (*QueryChainEpochUnbondingRequest) ProtoMessage()    {}
func (*QueryChainEpochUnbondingRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_4a1fda13ab20bfc7, []int{4}
}
func (m *QueryChainEpochUnbondingRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryChainEpochUnbondingRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryChainEpochUnbondingRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryChainEpochUnbondingRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryChainEpochUnbondingRequest.Merge(m, src)
}
func (m *QueryChainEpochUnbondingRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryChainEpochUnbondingRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryChainEpochUnbondingRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryChainEpochUnbondingRequest proto.InternalMessageInfo

func (m *QueryChainEpochUnbondingRequest) GetEpoch() uint64 {
	if m != nil {
		return m.Epoch
	}
	return 0
}

func (m *QueryChainEpochUnbondingRequest) GetChainID() string {
	if m != nil {
		return m.ChainID
	}
	return ""
}

type QueryChainEpochUnbondingResponse struct {
	ChainUnbonding Unbonding `protobuf:"bytes,1,opt,name=chainUnbonding,proto3" json:"chainUnbonding"`
}

func (m *QueryChainEpochUnbondingResponse) Reset()         { *m = QueryChainEpochUnbondingResponse{} }
func (m *QueryChainEpochUnbondingResponse) String() string { return proto.CompactTextString(m) }
func (*QueryChainEpochUnbondingResponse) ProtoMessage()    {}
func (*QueryChainEpochUnbondingResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_4a1fda13ab20bfc7, []int{5}
}
func (m *QueryChainEpochUnbondingResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryChainEpochUnbondingResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryChainEpochUnbondingResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryChainEpochUnbondingResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryChainEpochUnbondingResponse.Merge(m, src)
}
func (m *QueryChainEpochUnbondingResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryChainEpochUnbondingResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryChainEpochUnbondingResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryChainEpochUnbondingResponse proto.InternalMessageInfo

func (m *QueryChainEpochUnbondingResponse) GetChainUnbonding() Unbonding {
	if m != nil {
		return m.ChainUnbonding
	}
	return Unbonding{}
}

type QueryUserUndelegationRecordRequest struct {
	ChainID string `protobuf:"bytes,1,opt,name=chainID,proto3" json:"chainID,omitempty"`
	User    string `protobuf:"bytes,2,opt,name=user,proto3" json:"user,omitempty"`
}

func (m *QueryUserUndelegationRecordRequest) Reset()         { *m = QueryUserUndelegationRecordRequest{} }
func (m *QueryUserUndelegationRecordRequest) String() string { return proto.CompactTextString(m) }
func (*QueryUserUndelegationRecordRequest) ProtoMessage()    {}
func (*QueryUserUndelegationRecordRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_4a1fda13ab20bfc7, []int{6}
}
func (m *QueryUserUndelegationRecordRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryUserUndelegationRecordRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryUserUndelegationRecordRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryUserUndelegationRecordRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryUserUndelegationRecordRequest.Merge(m, src)
}
func (m *QueryUserUndelegationRecordRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryUserUndelegationRecordRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryUserUndelegationRecordRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryUserUndelegationRecordRequest proto.InternalMessageInfo

func (m *QueryUserUndelegationRecordRequest) GetChainID() string {
	if m != nil {
		return m.ChainID
	}
	return ""
}

func (m *QueryUserUndelegationRecordRequest) GetUser() string {
	if m != nil {
		return m.User
	}
	return ""
}

type QueryUserUndelegationRecordResponse struct {
	UndelegationRecords []UndelegationRecord `protobuf:"bytes,1,rep,name=undelegationRecords,proto3" json:"undelegationRecords"`
}

func (m *QueryUserUndelegationRecordResponse) Reset()         { *m = QueryUserUndelegationRecordResponse{} }
func (m *QueryUserUndelegationRecordResponse) String() string { return proto.CompactTextString(m) }
func (*QueryUserUndelegationRecordResponse) ProtoMessage()    {}
func (*QueryUserUndelegationRecordResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_4a1fda13ab20bfc7, []int{7}
}
func (m *QueryUserUndelegationRecordResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryUserUndelegationRecordResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryUserUndelegationRecordResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryUserUndelegationRecordResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryUserUndelegationRecordResponse.Merge(m, src)
}
func (m *QueryUserUndelegationRecordResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryUserUndelegationRecordResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryUserUndelegationRecordResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryUserUndelegationRecordResponse proto.InternalMessageInfo

func (m *QueryUserUndelegationRecordResponse) GetUndelegationRecords() []UndelegationRecord {
	if m != nil {
		return m.UndelegationRecords
	}
	return nil
}

func init() {
	proto.RegisterType((*QuerySourceChainRequest)(nil), "celinium.liquidstake.v1.QuerySourceChainRequest")
	proto.RegisterType((*QuerySourceChainResponse)(nil), "celinium.liquidstake.v1.QuerySourceChainResponse")
	proto.RegisterType((*QueryChainEpochDelegationRecordRequest)(nil), "celinium.liquidstake.v1.QueryChainEpochDelegationRecordRequest")
	proto.RegisterType((*QueryChainEpochDelegationRecordResponse)(nil), "celinium.liquidstake.v1.QueryChainEpochDelegationRecordResponse")
	proto.RegisterType((*QueryChainEpochUnbondingRequest)(nil), "celinium.liquidstake.v1.QueryChainEpochUnbondingRequest")
	proto.RegisterType((*QueryChainEpochUnbondingResponse)(nil), "celinium.liquidstake.v1.QueryChainEpochUnbondingResponse")
	proto.RegisterType((*QueryUserUndelegationRecordRequest)(nil), "celinium.liquidstake.v1.QueryUserUndelegationRecordRequest")
	proto.RegisterType((*QueryUserUndelegationRecordResponse)(nil), "celinium.liquidstake.v1.QueryUserUndelegationRecordResponse")
}

func init() {
	proto.RegisterFile("celinium/liquidstake/v1/query.proto", fileDescriptor_4a1fda13ab20bfc7)
}

var fileDescriptor_4a1fda13ab20bfc7 = []byte{
	// 595 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x95, 0x41, 0x6b, 0x13, 0x41,
	0x14, 0xc7, 0x33, 0xb5, 0x8d, 0xf8, 0x02, 0x1e, 0xa6, 0xc5, 0xc6, 0xa5, 0x6c, 0xc3, 0x56, 0x6d,
	0x55, 0xdc, 0x6d, 0x12, 0xa8, 0x16, 0x05, 0xa5, 0x56, 0x44, 0xf0, 0x60, 0x57, 0x02, 0xe2, 0x65,
	0x49, 0x37, 0xc3, 0x66, 0x31, 0xdd, 0x49, 0x76, 0x76, 0x8b, 0xbd, 0x7a, 0xf4, 0x24, 0x78, 0xf5,
	0xe2, 0x57, 0xf1, 0xd4, 0x93, 0x14, 0xbc, 0xf4, 0x24, 0x92, 0xf8, 0x41, 0x64, 0xdf, 0x4e, 0xd2,
	0x6d, 0x9a, 0xd9, 0xc6, 0xdc, 0xf6, 0xed, 0x7b, 0xff, 0x37, 0xff, 0xdf, 0xce, 0x7b, 0x09, 0xac,
	0xb9, 0xac, 0xe3, 0x07, 0x7e, 0x7c, 0x60, 0x75, 0xfc, 0x5e, 0xec, 0xb7, 0x44, 0xd4, 0xfc, 0xc0,
	0xac, 0xc3, 0xaa, 0xd5, 0x8b, 0x59, 0x78, 0x64, 0x76, 0x43, 0x1e, 0x71, 0xba, 0x3c, 0x2c, 0x32,
	0x33, 0x45, 0xe6, 0x61, 0x55, 0x5b, 0xf2, 0xb8, 0xc7, 0xb1, 0xc6, 0x4a, 0x9e, 0xd2, 0x72, 0xed,
	0xa6, 0xcb, 0xc5, 0x01, 0x17, 0x4e, 0x9a, 0x48, 0x03, 0x99, 0x5a, 0xf1, 0x38, 0xf7, 0x3a, 0xcc,
	0x6a, 0x76, 0x7d, 0xab, 0x19, 0x04, 0x3c, 0x6a, 0x46, 0x3e, 0x0f, 0x86, 0xd9, 0x7b, 0x2a, 0x33,
	0x82, 0xc7, 0xa1, 0xcb, 0x1c, 0xb7, 0xdd, 0xf4, 0x03, 0x59, 0xab, 0x34, 0x9e, 0x9a, 0xc3, 0x22,
	0xa3, 0x0e, 0xcb, 0x7b, 0x09, 0xc7, 0x5b, 0xd4, 0x3f, 0x4f, 0xe4, 0x36, 0xeb, 0xc5, 0x4c, 0x44,
	0xb4, 0x0c, 0x57, 0x31, 0x7e, 0xb5, 0x5b, 0x26, 0x15, 0xb2, 0x71, 0xcd, 0x1e, 0x86, 0x46, 0x1b,
	0xca, 0x17, 0x45, 0xa2, 0xcb, 0x03, 0xc1, 0xe8, 0x6b, 0x28, 0x89, 0xb3, 0xd7, 0xa8, 0x2c, 0xd5,
	0x6e, 0x99, 0x8a, 0xef, 0x63, 0x66, 0x5a, 0xec, 0xcc, 0x1f, 0xff, 0x5e, 0x2d, 0xd8, 0x59, 0xb9,
	0xf1, 0x0e, 0xee, 0xe0, 0x49, 0x18, 0xbd, 0xe8, 0x72, 0xb7, 0xbd, 0xcb, 0x3a, 0xcc, 0xc3, 0x6f,
	0x62, 0x33, 0x97, 0x87, 0xad, 0xa1, 0xdb, 0x25, 0x58, 0x60, 0x49, 0x1e, 0x4f, 0x9c, 0xb7, 0xd3,
	0x20, 0x61, 0x70, 0x25, 0xc3, 0x5c, 0xca, 0x20, 0x43, 0x23, 0x84, 0xf5, 0x4b, 0x3b, 0x4b, 0xa4,
	0x97, 0x50, 0x0c, 0xf1, 0x8d, 0xa4, 0xb9, 0xab, 0xa4, 0x19, 0x6f, 0x21, 0x91, 0xa4, 0xdc, 0xd8,
	0x83, 0xd5, 0xb1, 0x33, 0x1b, 0xc1, 0x3e, 0x0f, 0x5a, 0x7e, 0xe0, 0xcd, 0x8a, 0x11, 0x41, 0x45,
	0xdd, 0x52, 0xfa, 0x7f, 0x03, 0xd7, 0xb1, 0x7c, 0x94, 0x91, 0x1c, 0x86, 0x92, 0x63, 0x54, 0x29,
	0x01, 0xc6, 0xf4, 0x86, 0x0d, 0x06, 0x9e, 0xda, 0x10, 0x2c, 0x6c, 0x04, 0x2d, 0xc5, 0x95, 0x64,
	0x5c, 0x93, 0x73, 0xae, 0x29, 0x85, 0xf9, 0x58, 0xb0, 0x50, 0xc2, 0xe0, 0xb3, 0xf1, 0x99, 0xc0,
	0x5a, 0x6e, 0x53, 0x49, 0xe3, 0xc2, 0x62, 0x7c, 0x21, 0x2b, 0xca, 0xa4, 0x72, 0x65, 0xa3, 0x54,
	0xbb, 0x9f, 0x83, 0xd4, 0x9a, 0x7c, 0x39, 0x93, 0xba, 0xd5, 0xbe, 0x15, 0x61, 0x01, 0xcd, 0xd0,
	0xef, 0x04, 0x4a, 0x99, 0x21, 0xa5, 0x9b, 0xca, 0x13, 0x14, 0x7b, 0xa4, 0x55, 0xff, 0x43, 0x91,
	0x32, 0x1a, 0x0f, 0x3e, 0xfd, 0xfa, 0xfb, 0x75, 0x6e, 0x9d, 0xde, 0xb6, 0xa6, 0xd9, 0x77, 0x7a,
	0x4a, 0x40, 0x53, 0xcf, 0x31, 0x7d, 0x9a, 0x6f, 0xe0, 0xd2, 0xdd, 0xd2, 0x9e, 0xcd, 0xde, 0x40,
	0x02, 0x3d, 0x44, 0xa0, 0x2a, 0xb5, 0x94, 0x40, 0x48, 0xe2, 0xe0, 0xb8, 0x3b, 0x67, 0xf7, 0x41,
	0x7f, 0x10, 0x58, 0x9c, 0x30, 0xdb, 0xf4, 0xd1, 0xb4, 0x96, 0xc6, 0x37, 0x4c, 0xdb, 0x9e, 0x41,
	0x29, 0x29, 0xb6, 0x90, 0x62, 0x93, 0x9a, 0x53, 0x51, 0xc4, 0x23, 0xb3, 0x3f, 0x09, 0xdc, 0x98,
	0x3c, 0xd5, 0xf4, 0x71, 0xbe, 0x9b, 0xdc, 0x05, 0xd3, 0x9e, 0xcc, 0x26, 0x96, 0x34, 0xdb, 0x48,
	0x53, 0xa7, 0x55, 0x25, 0x4d, 0xb2, 0x97, 0x4e, 0x76, 0x3d, 0x9c, 0xf4, 0x87, 0x6c, 0x67, 0xeb,
	0xb8, 0xaf, 0x93, 0x93, 0xbe, 0x4e, 0xfe, 0xf4, 0x75, 0xf2, 0x65, 0xa0, 0x17, 0x4e, 0x06, 0x7a,
	0xe1, 0x74, 0xa0, 0x17, 0xde, 0xaf, 0x8c, 0x7a, 0x7d, 0x3c, 0xd7, 0x2d, 0x3a, 0xea, 0x32, 0xb1,
	0x5f, 0xc4, 0x3f, 0x9d, 0xfa, 0xbf, 0x00, 0x00, 0x00, 0xff, 0xff, 0x97, 0x4d, 0xaa, 0xdc, 0x54,
	0x07, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type QueryClient interface {
	SourceChain(ctx context.Context, in *QuerySourceChainRequest, opts ...grpc.CallOption) (*QuerySourceChainResponse, error)
	ChainEpochDelegationRecord(ctx context.Context, in *QueryChainEpochDelegationRecordRequest, opts ...grpc.CallOption) (*QueryChainEpochDelegationRecordResponse, error)
	ChainEpochUnbonding(ctx context.Context, in *QueryChainEpochUnbondingRequest, opts ...grpc.CallOption) (*QueryChainEpochUnbondingResponse, error)
	UserUndelegationRecord(ctx context.Context, in *QueryUserUndelegationRecordRequest, opts ...grpc.CallOption) (*QueryUserUndelegationRecordResponse, error)
}

type queryClient struct {
	cc grpc1.ClientConn
}

func NewQueryClient(cc grpc1.ClientConn) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) SourceChain(ctx context.Context, in *QuerySourceChainRequest, opts ...grpc.CallOption) (*QuerySourceChainResponse, error) {
	out := new(QuerySourceChainResponse)
	err := c.cc.Invoke(ctx, "/celinium.liquidstake.v1.Query/SourceChain", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) ChainEpochDelegationRecord(ctx context.Context, in *QueryChainEpochDelegationRecordRequest, opts ...grpc.CallOption) (*QueryChainEpochDelegationRecordResponse, error) {
	out := new(QueryChainEpochDelegationRecordResponse)
	err := c.cc.Invoke(ctx, "/celinium.liquidstake.v1.Query/ChainEpochDelegationRecord", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) ChainEpochUnbonding(ctx context.Context, in *QueryChainEpochUnbondingRequest, opts ...grpc.CallOption) (*QueryChainEpochUnbondingResponse, error) {
	out := new(QueryChainEpochUnbondingResponse)
	err := c.cc.Invoke(ctx, "/celinium.liquidstake.v1.Query/ChainEpochUnbonding", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) UserUndelegationRecord(ctx context.Context, in *QueryUserUndelegationRecordRequest, opts ...grpc.CallOption) (*QueryUserUndelegationRecordResponse, error) {
	out := new(QueryUserUndelegationRecordResponse)
	err := c.cc.Invoke(ctx, "/celinium.liquidstake.v1.Query/UserUndelegationRecord", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
type QueryServer interface {
	SourceChain(context.Context, *QuerySourceChainRequest) (*QuerySourceChainResponse, error)
	ChainEpochDelegationRecord(context.Context, *QueryChainEpochDelegationRecordRequest) (*QueryChainEpochDelegationRecordResponse, error)
	ChainEpochUnbonding(context.Context, *QueryChainEpochUnbondingRequest) (*QueryChainEpochUnbondingResponse, error)
	UserUndelegationRecord(context.Context, *QueryUserUndelegationRecordRequest) (*QueryUserUndelegationRecordResponse, error)
}

// UnimplementedQueryServer can be embedded to have forward compatible implementations.
type UnimplementedQueryServer struct {
}

func (*UnimplementedQueryServer) SourceChain(ctx context.Context, req *QuerySourceChainRequest) (*QuerySourceChainResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SourceChain not implemented")
}
func (*UnimplementedQueryServer) ChainEpochDelegationRecord(ctx context.Context, req *QueryChainEpochDelegationRecordRequest) (*QueryChainEpochDelegationRecordResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChainEpochDelegationRecord not implemented")
}
func (*UnimplementedQueryServer) ChainEpochUnbonding(ctx context.Context, req *QueryChainEpochUnbondingRequest) (*QueryChainEpochUnbondingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChainEpochUnbonding not implemented")
}
func (*UnimplementedQueryServer) UserUndelegationRecord(ctx context.Context, req *QueryUserUndelegationRecordRequest) (*QueryUserUndelegationRecordResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserUndelegationRecord not implemented")
}

func RegisterQueryServer(s grpc1.Server, srv QueryServer) {
	s.RegisterService(&_Query_serviceDesc, srv)
}

func _Query_SourceChain_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QuerySourceChainRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).SourceChain(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/celinium.liquidstake.v1.Query/SourceChain",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).SourceChain(ctx, req.(*QuerySourceChainRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_ChainEpochDelegationRecord_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryChainEpochDelegationRecordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).ChainEpochDelegationRecord(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/celinium.liquidstake.v1.Query/ChainEpochDelegationRecord",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).ChainEpochDelegationRecord(ctx, req.(*QueryChainEpochDelegationRecordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_ChainEpochUnbonding_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryChainEpochUnbondingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).ChainEpochUnbonding(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/celinium.liquidstake.v1.Query/ChainEpochUnbonding",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).ChainEpochUnbonding(ctx, req.(*QueryChainEpochUnbondingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_UserUndelegationRecord_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryUserUndelegationRecordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).UserUndelegationRecord(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/celinium.liquidstake.v1.Query/UserUndelegationRecord",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).UserUndelegationRecord(ctx, req.(*QueryUserUndelegationRecordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Query_serviceDesc = grpc.ServiceDesc{
	ServiceName: "celinium.liquidstake.v1.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SourceChain",
			Handler:    _Query_SourceChain_Handler,
		},
		{
			MethodName: "ChainEpochDelegationRecord",
			Handler:    _Query_ChainEpochDelegationRecord_Handler,
		},
		{
			MethodName: "ChainEpochUnbonding",
			Handler:    _Query_ChainEpochUnbonding_Handler,
		},
		{
			MethodName: "UserUndelegationRecord",
			Handler:    _Query_UserUndelegationRecord_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "celinium/liquidstake/v1/query.proto",
}

func (m *QuerySourceChainRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QuerySourceChainRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QuerySourceChainRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ChainID) > 0 {
		i -= len(m.ChainID)
		copy(dAtA[i:], m.ChainID)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.ChainID)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QuerySourceChainResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QuerySourceChainResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QuerySourceChainResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.SourceChain.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryChainEpochDelegationRecordRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryChainEpochDelegationRecordRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryChainEpochDelegationRecordRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ChainID) > 0 {
		i -= len(m.ChainID)
		copy(dAtA[i:], m.ChainID)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.ChainID)))
		i--
		dAtA[i] = 0x12
	}
	if m.Epoch != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Epoch))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryChainEpochDelegationRecordResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryChainEpochDelegationRecordResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryChainEpochDelegationRecordResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Record.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryChainEpochUnbondingRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryChainEpochUnbondingRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryChainEpochUnbondingRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ChainID) > 0 {
		i -= len(m.ChainID)
		copy(dAtA[i:], m.ChainID)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.ChainID)))
		i--
		dAtA[i] = 0x12
	}
	if m.Epoch != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Epoch))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryChainEpochUnbondingResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryChainEpochUnbondingResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryChainEpochUnbondingResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.ChainUnbonding.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryUserUndelegationRecordRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryUserUndelegationRecordRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryUserUndelegationRecordRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.User) > 0 {
		i -= len(m.User)
		copy(dAtA[i:], m.User)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.User)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.ChainID) > 0 {
		i -= len(m.ChainID)
		copy(dAtA[i:], m.ChainID)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.ChainID)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryUserUndelegationRecordResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryUserUndelegationRecordResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryUserUndelegationRecordResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.UndelegationRecords) > 0 {
		for iNdEx := len(m.UndelegationRecords) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.UndelegationRecords[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintQuery(dAtA []byte, offset int, v uint64) int {
	offset -= sovQuery(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *QuerySourceChainRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ChainID)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QuerySourceChainResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.SourceChain.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryChainEpochDelegationRecordRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Epoch != 0 {
		n += 1 + sovQuery(uint64(m.Epoch))
	}
	l = len(m.ChainID)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryChainEpochDelegationRecordResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Record.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryChainEpochUnbondingRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Epoch != 0 {
		n += 1 + sovQuery(uint64(m.Epoch))
	}
	l = len(m.ChainID)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryChainEpochUnbondingResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.ChainUnbonding.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryUserUndelegationRecordRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ChainID)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.User)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryUserUndelegationRecordResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.UndelegationRecords) > 0 {
		for _, e := range m.UndelegationRecords {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func sovQuery(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozQuery(x uint64) (n int) {
	return sovQuery(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *QuerySourceChainRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QuerySourceChainRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QuerySourceChainRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChainID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QuerySourceChainResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QuerySourceChainResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QuerySourceChainResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SourceChain", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.SourceChain.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryChainEpochDelegationRecordRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryChainEpochDelegationRecordRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryChainEpochDelegationRecordRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Epoch", wireType)
			}
			m.Epoch = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Epoch |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChainID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryChainEpochDelegationRecordResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryChainEpochDelegationRecordResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryChainEpochDelegationRecordResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Record", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Record.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryChainEpochUnbondingRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryChainEpochUnbondingRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryChainEpochUnbondingRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Epoch", wireType)
			}
			m.Epoch = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Epoch |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChainID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryChainEpochUnbondingResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryChainEpochUnbondingResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryChainEpochUnbondingResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainUnbonding", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ChainUnbonding.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryUserUndelegationRecordRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryUserUndelegationRecordRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryUserUndelegationRecordRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChainID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field User", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.User = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryUserUndelegationRecordResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryUserUndelegationRecordResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryUserUndelegationRecordResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UndelegationRecords", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UndelegationRecords = append(m.UndelegationRecords, UndelegationRecord{})
			if err := m.UndelegationRecords[len(m.UndelegationRecords)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipQuery(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthQuery
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupQuery
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthQuery
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthQuery        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowQuery          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupQuery = fmt.Errorf("proto: unexpected end of group")
)
