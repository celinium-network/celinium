// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: celinium/liquidstake/v1/stake.proto

package types

import (
	fmt "fmt"
	_ "github.com/cosmos/cosmos-proto"
	types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// The record of source chain delegation in a epoch.
type DelegationRecord struct {
	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	// Users delegated tokens accumulated by the specified epoch
	DelegationCoin types.Coin `protobuf:"bytes,2,opt,name=delegationCoin,proto3" json:"delegationCoin"`
	// Status of the record.
	// A DelegationRecord goes through the following status:
	//   1) Pending: The epoch he is in is not over yet
	//   2) Transfering: Transferring user-delegated funds back to the source chain.
	//   3) Transferred: Transfer back to source chain successfully.Because the funds
	//      need to be delegated on the source chain immediately, this state will not be saved.
	//   4) Delegating: Cross-chain delegation is being executed through IBC
	//   5) Done: Cross-chain delegation has be done. If this state is reached, then this
	//      record will be deleted, so this state will not be recorded."
	// Above is a successful state, but there are also states that represent failure.
	//   1ï¼‰TransferFailed: An error occurred during the process of transferring funds back to the source chain.
	//   2) DelegateFailed: An error occurred during the process of delegating in source chain.
	Status uint32 `protobuf:"varint,3,opt,name=status,proto3" json:"status,omitempty"`
	// The number of created epoch
	EpochNumber uint64 `protobuf:"varint,4,opt,name=epochNumber,proto3" json:"epochNumber,omitempty"`
	ChainID     string `protobuf:"bytes,5,opt,name=chainID,proto3" json:"chainID,omitempty"`
}

func (m *DelegationRecord) Reset()         { *m = DelegationRecord{} }
func (m *DelegationRecord) String() string { return proto.CompactTextString(m) }
func (*DelegationRecord) ProtoMessage()    {}
func (*DelegationRecord) Descriptor() ([]byte, []int) {
	return fileDescriptor_9beff2e65f7b246b, []int{0}
}
func (m *DelegationRecord) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DelegationRecord) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DelegationRecord.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DelegationRecord) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DelegationRecord.Merge(m, src)
}
func (m *DelegationRecord) XXX_Size() int {
	return m.Size()
}
func (m *DelegationRecord) XXX_DiscardUnknown() {
	xxx_messageInfo_DelegationRecord.DiscardUnknown(m)
}

var xxx_messageInfo_DelegationRecord proto.InternalMessageInfo

func (m *DelegationRecord) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *DelegationRecord) GetDelegationCoin() types.Coin {
	if m != nil {
		return m.DelegationCoin
	}
	return types.Coin{}
}

func (m *DelegationRecord) GetStatus() uint32 {
	if m != nil {
		return m.Status
	}
	return 0
}

func (m *DelegationRecord) GetEpochNumber() uint64 {
	if m != nil {
		return m.EpochNumber
	}
	return 0
}

func (m *DelegationRecord) GetChainID() string {
	if m != nil {
		return m.ChainID
	}
	return ""
}

// UserUndelegationRecord represents a record of a user's undelegation action.
type UserUndelegationRecord struct {
	// Unique identifier for the undelegation record
	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	// The chain ID of the source chain where the undelegation was initiated.
	ChainID string `protobuf:"bytes,2,opt,name=chainID,proto3" json:"chainID,omitempty"`
	// The epoch of the undelegation, used to record the time or timestamp of the undelegation
	Epoch uint64 `protobuf:"varint,3,opt,name=epoch,proto3" json:"epoch,omitempty"`
	// The delegator who canceled the delegation, i.e. the user who originally delegated
	Delegator string `protobuf:"bytes,4,opt,name=delegator,proto3" json:"delegator,omitempty"`
	// The recipient account for the redeemed funds.
	Receiver string `protobuf:"bytes,5,opt,name=receiver,proto3" json:"receiver,omitempty"`
	// The amount and type of funds to be redeemed.
	RedeemToken *types.Coin `protobuf:"bytes,6,opt,name=redeemToken,proto3" json:"redeemToken,omitempty"`
	// The redemption status of the undelegation.
	// 1) Pending: The undelegation request has been submitted but not yet processed or completed.
	// 2) Claimable: The undelegation has been processed and the funds are available to be claimed by the delegator.
	// 3) Complete: The funds have been successfully claimed by the delegator.
	CliamStatus uint32 `protobuf:"varint,7,opt,name=cliamStatus,proto3" json:"cliamStatus,omitempty"`
}

func (m *UserUndelegationRecord) Reset()         { *m = UserUndelegationRecord{} }
func (m *UserUndelegationRecord) String() string { return proto.CompactTextString(m) }
func (*UserUndelegationRecord) ProtoMessage()    {}
func (*UserUndelegationRecord) Descriptor() ([]byte, []int) {
	return fileDescriptor_9beff2e65f7b246b, []int{1}
}
func (m *UserUndelegationRecord) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UserUndelegationRecord) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UserUndelegationRecord.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UserUndelegationRecord) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UserUndelegationRecord.Merge(m, src)
}
func (m *UserUndelegationRecord) XXX_Size() int {
	return m.Size()
}
func (m *UserUndelegationRecord) XXX_DiscardUnknown() {
	xxx_messageInfo_UserUndelegationRecord.DiscardUnknown(m)
}

var xxx_messageInfo_UserUndelegationRecord proto.InternalMessageInfo

func (m *UserUndelegationRecord) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *UserUndelegationRecord) GetChainID() string {
	if m != nil {
		return m.ChainID
	}
	return ""
}

func (m *UserUndelegationRecord) GetEpoch() uint64 {
	if m != nil {
		return m.Epoch
	}
	return 0
}

func (m *UserUndelegationRecord) GetDelegator() string {
	if m != nil {
		return m.Delegator
	}
	return ""
}

func (m *UserUndelegationRecord) GetReceiver() string {
	if m != nil {
		return m.Receiver
	}
	return ""
}

func (m *UserUndelegationRecord) GetRedeemToken() *types.Coin {
	if m != nil {
		return m.RedeemToken
	}
	return nil
}

func (m *UserUndelegationRecord) GetCliamStatus() uint32 {
	if m != nil {
		return m.CliamStatus
	}
	return 0
}

// Represents a record of an unbonding transaction, which captures the derivative token that was burned
// and the native token that is to be redeemed.
type UnbondingEntry struct {
	BurnedDerivativeAmount Int `protobuf:"bytes,1,opt,name=burnedDerivativeAmount,proto3,customtype=Int" json:"burnedDerivativeAmount"`
	// The native tokens to be redeemed.
	RedeemNativeToken *types.Coin `protobuf:"bytes,2,opt,name=redeemNativeToken,proto3" json:"redeemNativeToken,omitempty"`
	// The time at which the unbonding will complete and the native tokens will be redeemable.
	UnbondTIme uint64 `protobuf:"varint,3,opt,name=unbondTIme,proto3" json:"unbondTIme,omitempty"`
	// The status of the unbonding entry.
	// 1) Pending: waiting for the current epoch to end
	// 2) Start: initiated the Unbonding process on the source chain
	// 3) Unbonding: successfully initiated the Unbonding process
	// 4) Transfering: Unbonding period has elapsed, redeeming funds from the source chain
	// 5) Done: funds have been successfully redeemed
	Status uint32 `protobuf:"varint,4,opt,name=status,proto3" json:"status,omitempty"`
	// The IDs of the UserUnbondRecord entries that correspond to this unbonding entry.
	UserUnbondRecordIds []uint64 `protobuf:"varint,5,rep,packed,name=UserUnbondRecordIds,proto3" json:"UserUnbondRecordIds,omitempty"`
}

func (m *UnbondingEntry) Reset()         { *m = UnbondingEntry{} }
func (m *UnbondingEntry) String() string { return proto.CompactTextString(m) }
func (*UnbondingEntry) ProtoMessage()    {}
func (*UnbondingEntry) Descriptor() ([]byte, []int) {
	return fileDescriptor_9beff2e65f7b246b, []int{2}
}
func (m *UnbondingEntry) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UnbondingEntry) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UnbondingEntry.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UnbondingEntry) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UnbondingEntry.Merge(m, src)
}
func (m *UnbondingEntry) XXX_Size() int {
	return m.Size()
}
func (m *UnbondingEntry) XXX_DiscardUnknown() {
	xxx_messageInfo_UnbondingEntry.DiscardUnknown(m)
}

var xxx_messageInfo_UnbondingEntry proto.InternalMessageInfo

func (m *UnbondingEntry) GetRedeemNativeToken() *types.Coin {
	if m != nil {
		return m.RedeemNativeToken
	}
	return nil
}

func (m *UnbondingEntry) GetUnbondTIme() uint64 {
	if m != nil {
		return m.UnbondTIme
	}
	return 0
}

func (m *UnbondingEntry) GetStatus() uint32 {
	if m != nil {
		return m.Status
	}
	return 0
}

func (m *UnbondingEntry) GetUserUnbondRecordIds() []uint64 {
	if m != nil {
		return m.UserUnbondRecordIds
	}
	return nil
}

// Represents a collection of unbonding entries for a given epoch.
type UnbondingEpoch struct {
	// The epoch number.
	Epoch uint64 `protobuf:"varint,1,opt,name=epoch,proto3" json:"epoch,omitempty"`
	// The unbonding entries.
	Unbondings []*UnbondingEntry `protobuf:"bytes,2,rep,name=unbondings,proto3" json:"unbondings,omitempty"`
}

func (m *UnbondingEpoch) Reset()         { *m = UnbondingEpoch{} }
func (m *UnbondingEpoch) String() string { return proto.CompactTextString(m) }
func (*UnbondingEpoch) ProtoMessage()    {}
func (*UnbondingEpoch) Descriptor() ([]byte, []int) {
	return fileDescriptor_9beff2e65f7b246b, []int{3}
}
func (m *UnbondingEpoch) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UnbondingEpoch) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UnbondingEpoch.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UnbondingEpoch) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UnbondingEpoch.Merge(m, src)
}
func (m *UnbondingEpoch) XXX_Size() int {
	return m.Size()
}
func (m *UnbondingEpoch) XXX_DiscardUnknown() {
	xxx_messageInfo_UnbondingEpoch.DiscardUnknown(m)
}

var xxx_messageInfo_UnbondingEpoch proto.InternalMessageInfo

func (m *UnbondingEpoch) GetEpoch() uint64 {
	if m != nil {
		return m.Epoch
	}
	return 0
}

func (m *UnbondingEpoch) GetUnbondings() []*UnbondingEntry {
	if m != nil {
		return m.Unbondings
	}
	return nil
}

func init() {
	proto.RegisterType((*DelegationRecord)(nil), "celinium.liquidstake.v1.DelegationRecord")
	proto.RegisterType((*UserUndelegationRecord)(nil), "celinium.liquidstake.v1.UserUndelegationRecord")
	proto.RegisterType((*UnbondingEntry)(nil), "celinium.liquidstake.v1.UnbondingEntry")
	proto.RegisterType((*UnbondingEpoch)(nil), "celinium.liquidstake.v1.UnbondingEpoch")
}

func init() {
	proto.RegisterFile("celinium/liquidstake/v1/stake.proto", fileDescriptor_9beff2e65f7b246b)
}

var fileDescriptor_9beff2e65f7b246b = []byte{
	// 539 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x84, 0x53, 0xcd, 0x6e, 0xd3, 0x40,
	0x10, 0xce, 0x3a, 0x6e, 0x4b, 0x36, 0x22, 0x82, 0xa5, 0x0a, 0x4e, 0x54, 0xb9, 0x56, 0x38, 0xe0,
	0x0b, 0x36, 0x29, 0x12, 0x17, 0x4e, 0x84, 0xa0, 0x28, 0x97, 0x4a, 0x2c, 0xcd, 0x85, 0x0b, 0xf2,
	0xcf, 0x28, 0x5d, 0x35, 0xde, 0x0d, 0xf6, 0x3a, 0xa2, 0x6f, 0xc1, 0x89, 0x27, 0xe1, 0xce, 0xb5,
	0xc7, 0x8a, 0x13, 0xe2, 0x50, 0xa1, 0xe4, 0x09, 0x78, 0x03, 0xe4, 0x5d, 0x27, 0x38, 0x40, 0x95,
	0x9b, 0x67, 0xe6, 0x9b, 0x99, 0x6f, 0xbf, 0xcf, 0x83, 0x1f, 0x45, 0x30, 0x63, 0x9c, 0xe5, 0x89,
	0x3f, 0x63, 0x1f, 0x72, 0x16, 0x67, 0x32, 0xb8, 0x00, 0x7f, 0xd1, 0xf7, 0xd5, 0x87, 0x37, 0x4f,
	0x85, 0x14, 0xe4, 0xe1, 0x1a, 0xe4, 0x55, 0x40, 0xde, 0xa2, 0xdf, 0x3d, 0x9c, 0x8a, 0xa9, 0x50,
	0x18, 0xbf, 0xf8, 0xd2, 0xf0, 0x6e, 0x27, 0x12, 0x59, 0x22, 0xb2, 0xf7, 0xba, 0xa0, 0x83, 0xb2,
	0x64, 0xeb, 0xc8, 0x0f, 0x83, 0xac, 0xd8, 0x12, 0x82, 0x0c, 0xfa, 0x7e, 0x24, 0x18, 0xd7, 0xf5,
	0xde, 0x57, 0x84, 0xef, 0x0d, 0x61, 0x06, 0xd3, 0x40, 0x32, 0xc1, 0x29, 0x44, 0x22, 0x8d, 0x49,
	0x0b, 0x1b, 0x2c, 0xb6, 0x90, 0x83, 0x5c, 0x93, 0x1a, 0x2c, 0x26, 0x23, 0xdc, 0x8a, 0x37, 0x98,
	0x57, 0x82, 0x71, 0xcb, 0x70, 0x90, 0xdb, 0x3c, 0xe9, 0x78, 0xe5, 0xae, 0x62, 0xba, 0x57, 0x4e,
	0xf7, 0x0a, 0xc0, 0xc0, 0xbc, 0xba, 0x39, 0xae, 0xd1, 0xbf, 0xda, 0x48, 0x1b, 0xef, 0x67, 0x32,
	0x90, 0x79, 0x66, 0xd5, 0x1d, 0xe4, 0xde, 0xa5, 0x65, 0x44, 0x1c, 0xdc, 0x84, 0xb9, 0x88, 0xce,
	0x4f, 0xf3, 0x24, 0x84, 0xd4, 0x32, 0xd5, 0xe6, 0x6a, 0x8a, 0x58, 0xf8, 0x20, 0x3a, 0x0f, 0x18,
	0x1f, 0x0f, 0xad, 0x3d, 0x07, 0xb9, 0x0d, 0xba, 0x0e, 0x7b, 0xbf, 0x10, 0x6e, 0x4f, 0x32, 0x48,
	0x27, 0x3c, 0xde, 0xf5, 0x8e, 0xca, 0x10, 0x63, 0x6b, 0x08, 0x39, 0xc4, 0x7b, 0x6a, 0x9b, 0xe2,
	0x65, 0x52, 0x1d, 0x90, 0x23, 0xdc, 0x28, 0x67, 0x0a, 0x4d, 0xaa, 0x41, 0xff, 0x24, 0x48, 0x17,
	0xdf, 0x49, 0x21, 0x02, 0xb6, 0x80, 0xb4, 0xe4, 0xb4, 0x89, 0xc9, 0x0b, 0xdc, 0x4c, 0x21, 0x06,
	0x48, 0xce, 0xc4, 0x05, 0x70, 0x6b, 0x7f, 0x87, 0x5c, 0xb4, 0x8a, 0x2e, 0xd4, 0x88, 0x66, 0x2c,
	0x48, 0xde, 0x6a, 0xa9, 0x0e, 0x94, 0x54, 0xd5, 0x54, 0xef, 0xb3, 0x81, 0x5b, 0x13, 0x1e, 0x0a,
	0x1e, 0x33, 0x3e, 0x7d, 0xcd, 0x65, 0x7a, 0x49, 0xde, 0xe0, 0x76, 0x98, 0xa7, 0x1c, 0xe2, 0x21,
	0xa4, 0x6c, 0x11, 0x48, 0xb6, 0x80, 0x97, 0x89, 0xc8, 0xb9, 0x54, 0xef, 0x6f, 0x0c, 0x3a, 0x85,
	0x21, 0x3f, 0x6e, 0x8e, 0xeb, 0x63, 0x2e, 0xbf, 0x7d, 0x79, 0x82, 0x4b, 0x2a, 0x63, 0x2e, 0xe9,
	0x2d, 0x8d, 0x64, 0x84, 0xef, 0x6b, 0x5a, 0xa7, 0x2a, 0xab, 0x9f, 0xb2, 0xcb, 0x79, 0xfa, 0x6f,
	0x0f, 0xb1, 0x31, 0xce, 0x15, 0xdb, 0xb3, 0x71, 0x02, 0xa5, 0xc4, 0x95, 0x4c, 0xe5, 0xb7, 0x30,
	0xb7, 0x7e, 0x8b, 0xa7, 0xf8, 0x81, 0x76, 0xb6, 0x40, 0x6a, 0x4f, 0xc7, 0x71, 0x66, 0xed, 0x39,
	0x75, 0xd7, 0xa4, 0xff, 0x2b, 0xf5, 0x44, 0x55, 0x17, 0xe5, 0xe1, 0xc6, 0x59, 0x54, 0x75, 0x76,
	0xb4, 0x66, 0xc4, 0xf8, 0x34, 0xb3, 0x0c, 0xa7, 0xee, 0x36, 0x4f, 0x1e, 0x7b, 0xb7, 0x5c, 0x9d,
	0xb7, 0x2d, 0x35, 0xad, 0xb4, 0x0e, 0x9e, 0x5f, 0x2d, 0x6d, 0x74, 0xbd, 0xb4, 0xd1, 0xcf, 0xa5,
	0x8d, 0x3e, 0xad, 0xec, 0xda, 0xf5, 0xca, 0xae, 0x7d, 0x5f, 0xd9, 0xb5, 0x77, 0x47, 0x9b, 0x43,
	0xff, 0xb8, 0x75, 0xea, 0xf2, 0x72, 0x0e, 0x59, 0xb8, 0xaf, 0xce, 0xef, 0xd9, 0xef, 0x00, 0x00,
	0x00, 0xff, 0xff, 0xfa, 0x92, 0x40, 0x1c, 0x0f, 0x04, 0x00, 0x00,
}

func (m *DelegationRecord) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DelegationRecord) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DelegationRecord) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ChainID) > 0 {
		i -= len(m.ChainID)
		copy(dAtA[i:], m.ChainID)
		i = encodeVarintStake(dAtA, i, uint64(len(m.ChainID)))
		i--
		dAtA[i] = 0x2a
	}
	if m.EpochNumber != 0 {
		i = encodeVarintStake(dAtA, i, uint64(m.EpochNumber))
		i--
		dAtA[i] = 0x20
	}
	if m.Status != 0 {
		i = encodeVarintStake(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x18
	}
	{
		size, err := m.DelegationCoin.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintStake(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if m.Id != 0 {
		i = encodeVarintStake(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *UserUndelegationRecord) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UserUndelegationRecord) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UserUndelegationRecord) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.CliamStatus != 0 {
		i = encodeVarintStake(dAtA, i, uint64(m.CliamStatus))
		i--
		dAtA[i] = 0x38
	}
	if m.RedeemToken != nil {
		{
			size, err := m.RedeemToken.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintStake(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	if len(m.Receiver) > 0 {
		i -= len(m.Receiver)
		copy(dAtA[i:], m.Receiver)
		i = encodeVarintStake(dAtA, i, uint64(len(m.Receiver)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Delegator) > 0 {
		i -= len(m.Delegator)
		copy(dAtA[i:], m.Delegator)
		i = encodeVarintStake(dAtA, i, uint64(len(m.Delegator)))
		i--
		dAtA[i] = 0x22
	}
	if m.Epoch != 0 {
		i = encodeVarintStake(dAtA, i, uint64(m.Epoch))
		i--
		dAtA[i] = 0x18
	}
	if len(m.ChainID) > 0 {
		i -= len(m.ChainID)
		copy(dAtA[i:], m.ChainID)
		i = encodeVarintStake(dAtA, i, uint64(len(m.ChainID)))
		i--
		dAtA[i] = 0x12
	}
	if m.Id != 0 {
		i = encodeVarintStake(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *UnbondingEntry) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UnbondingEntry) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UnbondingEntry) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.UserUnbondRecordIds) > 0 {
		dAtA4 := make([]byte, len(m.UserUnbondRecordIds)*10)
		var j3 int
		for _, num := range m.UserUnbondRecordIds {
			for num >= 1<<7 {
				dAtA4[j3] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j3++
			}
			dAtA4[j3] = uint8(num)
			j3++
		}
		i -= j3
		copy(dAtA[i:], dAtA4[:j3])
		i = encodeVarintStake(dAtA, i, uint64(j3))
		i--
		dAtA[i] = 0x2a
	}
	if m.Status != 0 {
		i = encodeVarintStake(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x20
	}
	if m.UnbondTIme != 0 {
		i = encodeVarintStake(dAtA, i, uint64(m.UnbondTIme))
		i--
		dAtA[i] = 0x18
	}
	if m.RedeemNativeToken != nil {
		{
			size, err := m.RedeemNativeToken.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintStake(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	{
		size := m.BurnedDerivativeAmount.Size()
		i -= size
		if _, err := m.BurnedDerivativeAmount.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintStake(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *UnbondingEpoch) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UnbondingEpoch) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UnbondingEpoch) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Unbondings) > 0 {
		for iNdEx := len(m.Unbondings) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Unbondings[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintStake(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if m.Epoch != 0 {
		i = encodeVarintStake(dAtA, i, uint64(m.Epoch))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintStake(dAtA []byte, offset int, v uint64) int {
	offset -= sovStake(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *DelegationRecord) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovStake(uint64(m.Id))
	}
	l = m.DelegationCoin.Size()
	n += 1 + l + sovStake(uint64(l))
	if m.Status != 0 {
		n += 1 + sovStake(uint64(m.Status))
	}
	if m.EpochNumber != 0 {
		n += 1 + sovStake(uint64(m.EpochNumber))
	}
	l = len(m.ChainID)
	if l > 0 {
		n += 1 + l + sovStake(uint64(l))
	}
	return n
}

func (m *UserUndelegationRecord) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovStake(uint64(m.Id))
	}
	l = len(m.ChainID)
	if l > 0 {
		n += 1 + l + sovStake(uint64(l))
	}
	if m.Epoch != 0 {
		n += 1 + sovStake(uint64(m.Epoch))
	}
	l = len(m.Delegator)
	if l > 0 {
		n += 1 + l + sovStake(uint64(l))
	}
	l = len(m.Receiver)
	if l > 0 {
		n += 1 + l + sovStake(uint64(l))
	}
	if m.RedeemToken != nil {
		l = m.RedeemToken.Size()
		n += 1 + l + sovStake(uint64(l))
	}
	if m.CliamStatus != 0 {
		n += 1 + sovStake(uint64(m.CliamStatus))
	}
	return n
}

func (m *UnbondingEntry) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.BurnedDerivativeAmount.Size()
	n += 1 + l + sovStake(uint64(l))
	if m.RedeemNativeToken != nil {
		l = m.RedeemNativeToken.Size()
		n += 1 + l + sovStake(uint64(l))
	}
	if m.UnbondTIme != 0 {
		n += 1 + sovStake(uint64(m.UnbondTIme))
	}
	if m.Status != 0 {
		n += 1 + sovStake(uint64(m.Status))
	}
	if len(m.UserUnbondRecordIds) > 0 {
		l = 0
		for _, e := range m.UserUnbondRecordIds {
			l += sovStake(uint64(e))
		}
		n += 1 + sovStake(uint64(l)) + l
	}
	return n
}

func (m *UnbondingEpoch) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Epoch != 0 {
		n += 1 + sovStake(uint64(m.Epoch))
	}
	if len(m.Unbondings) > 0 {
		for _, e := range m.Unbondings {
			l = e.Size()
			n += 1 + l + sovStake(uint64(l))
		}
	}
	return n
}

func sovStake(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozStake(x uint64) (n int) {
	return sovStake(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *DelegationRecord) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStake
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DelegationRecord: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DelegationRecord: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStake
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DelegationCoin", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStake
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStake
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthStake
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.DelegationCoin.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStake
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EpochNumber", wireType)
			}
			m.EpochNumber = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStake
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EpochNumber |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStake
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStake
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStake
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChainID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipStake(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthStake
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UserUndelegationRecord) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStake
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UserUndelegationRecord: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UserUndelegationRecord: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStake
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStake
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStake
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStake
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChainID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Epoch", wireType)
			}
			m.Epoch = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStake
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Epoch |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Delegator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStake
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStake
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStake
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Delegator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Receiver", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStake
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStake
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStake
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Receiver = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RedeemToken", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStake
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStake
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthStake
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.RedeemToken == nil {
				m.RedeemToken = &types.Coin{}
			}
			if err := m.RedeemToken.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CliamStatus", wireType)
			}
			m.CliamStatus = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStake
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CliamStatus |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipStake(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthStake
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UnbondingEntry) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStake
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UnbondingEntry: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UnbondingEntry: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BurnedDerivativeAmount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStake
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStake
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStake
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.BurnedDerivativeAmount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RedeemNativeToken", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStake
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStake
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthStake
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.RedeemNativeToken == nil {
				m.RedeemNativeToken = &types.Coin{}
			}
			if err := m.RedeemNativeToken.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UnbondTIme", wireType)
			}
			m.UnbondTIme = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStake
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UnbondTIme |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStake
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType == 0 {
				var v uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowStake
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.UserUnbondRecordIds = append(m.UserUnbondRecordIds, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowStake
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthStake
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthStake
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.UserUnbondRecordIds) == 0 {
					m.UserUnbondRecordIds = make([]uint64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowStake
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.UserUnbondRecordIds = append(m.UserUnbondRecordIds, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field UserUnbondRecordIds", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipStake(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthStake
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UnbondingEpoch) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStake
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UnbondingEpoch: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UnbondingEpoch: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Epoch", wireType)
			}
			m.Epoch = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStake
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Epoch |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Unbondings", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStake
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStake
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthStake
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Unbondings = append(m.Unbondings, &UnbondingEntry{})
			if err := m.Unbondings[len(m.Unbondings)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipStake(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthStake
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipStake(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowStake
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowStake
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowStake
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthStake
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupStake
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthStake
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthStake        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowStake          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupStake = fmt.Errorf("proto: unexpected end of group")
)
